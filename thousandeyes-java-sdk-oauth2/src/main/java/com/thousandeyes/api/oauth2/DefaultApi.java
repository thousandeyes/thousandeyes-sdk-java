/*
 * Endpoint for getting an OAuth2 token based on client credentials
 * This endpoint allows clients to trade their client credentials for an Access Token that can be used on subsequent calls to our API. Example of usage:    `   curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d 'client_id=someId&scope=someScope&client_secret=someSecret&grant_type=client_credentials' 'https://api.thousandeyes.com/v7/oauth2/token'   `
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.thousandeyes.api.oauth2;

import static com.thousandeyes.api.client.RequestUtil.parameterToPairs;
import static com.thousandeyes.api.client.RequestUtil.urlEncode;

import com.thousandeyes.api.client.ApiClient;
import com.thousandeyes.api.client.ApiException;
import com.thousandeyes.api.client.ApiResponse;
import com.thousandeyes.api.client.ApiRequest;
import org.apache.commons.lang3.tuple.Pair;

import com.thousandeyes.api.oauth2.model.AccessToken;
import com.thousandeyes.api.oauth2.model.Error;
import com.thousandeyes.api.oauth2.model.UnauthorizedError;
import com.thousandeyes.api.oauth2.model.ValidationError;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator", date = "2024-02-07T22:58:17.541479Z[Europe/Lisbon]")
public class DefaultApi {
  private final ApiClient apiClient;

  public DefaultApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create and return access token.
   * This endpoint uses the client credentials passed alongside the request to create a new access token and return it to the client.
   * @param clientId The Application ID. (optional)
   * @param clientSecret The application secret that was generated for you during the app registration. The Basic auth pattern of instead providing credentials in the Authorization header, per RFC 6749 is also supported. (optional)
   * @param grantType Must be set to &#x60;client_credentials&#x60;. (optional)
   * @param scope Requested scope values for the new access token. (optional)
   * @return AccessToken
   * @throws ApiException if fails to make API call
   */
  public AccessToken v7Oauth2TokenPost(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
    ApiResponse<AccessToken> response = v7Oauth2TokenPostWithHttpInfo(clientId, clientSecret, grantType, scope);
    return response.getData();
  }

  /**
   * Create and return access token.
   * This endpoint uses the client credentials passed alongside the request to create a new access token and return it to the client.
   * @param clientId The Application ID. (optional)
   * @param clientSecret The application secret that was generated for you during the app registration. The Basic auth pattern of instead providing credentials in the Authorization header, per RFC 6749 is also supported. (optional)
   * @param grantType Must be set to &#x60;client_credentials&#x60;. (optional)
   * @param scope Requested scope values for the new access token. (optional)
   * @return ApiResponse&lt;AccessToken&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AccessToken> v7Oauth2TokenPostWithHttpInfo(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
    v7Oauth2TokenPostValidateRequest();

    var requestBuilder = v7Oauth2TokenPostRequestBuilder(clientId, clientSecret, grantType, scope);

    return apiClient.send(requestBuilder.build(), AccessToken.class);
  }

  private void v7Oauth2TokenPostValidateRequest() throws ApiException {
  }

  private ApiRequest.ApiRequestBuilder v7Oauth2TokenPostRequestBuilder(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/v7/oauth2/token";
    requestBuilder.path(path);


    requestBuilder.header("Accept", List.of("application/json, application/problem+json"));

    return requestBuilder;
  }
}
