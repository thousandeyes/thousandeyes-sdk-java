/*
 * Usage API
 *  These usage endpoints define the following operations:  * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View organization usage` permission to access this endpoint.     * This operation offers visibility across all account groups within the organization.     * Users with `View organization usage` permission in multiple organizations should query the operation with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the Usage API operations for detailed usage instructions and optional parameters. 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.usage.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AllocationUnitUsageBreakdown
 */
@JsonPropertyOrder({
  AllocationUnitUsageBreakdown.JSON_PROPERTY_PRODUCT_NAME,
  AllocationUnitUsageBreakdown.JSON_PROPERTY_ALLOCATED_UNITS
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class AllocationUnitUsageBreakdown {
  public static final String JSON_PROPERTY_PRODUCT_NAME = "productName";
  private String productName;

  public static final String JSON_PROPERTY_ALLOCATED_UNITS = "allocatedUnits";
  private Long allocatedUnits;

  public AllocationUnitUsageBreakdown() { 
  }

  public AllocationUnitUsageBreakdown productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * The product name of the allocation.
   * @return productName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductName() {
    return productName;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductName(String productName) {
    this.productName = productName;
  }


  public AllocationUnitUsageBreakdown allocatedUnits(Long allocatedUnits) {
    this.allocatedUnits = allocatedUnits;
    return this;
  }

   /**
   * The number of allocated units for the product.
   * @return allocatedUnits
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOCATED_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getAllocatedUnits() {
    return allocatedUnits;
  }


  @JsonProperty(JSON_PROPERTY_ALLOCATED_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllocatedUnits(Long allocatedUnits) {
    this.allocatedUnits = allocatedUnits;
  }


  /**
   * Return true if this AllocationUnitUsageBreakdown object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocationUnitUsageBreakdown allocationUnitUsageBreakdown = (AllocationUnitUsageBreakdown) o;
    return Objects.equals(this.productName, allocationUnitUsageBreakdown.productName) &&
        Objects.equals(this.allocatedUnits, allocationUnitUsageBreakdown.allocatedUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productName, allocatedUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocationUnitUsageBreakdown {\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    allocatedUnits: ").append(toIndentedString(allocatedUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

