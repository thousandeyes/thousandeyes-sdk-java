/*
 * Usage API
 *  These usage endpoints define the following operations:  * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View organization usage` permission to access this endpoint.     * This operation offers visibility across all account groups within the organization.     * Users with `View organization usage` permission in multiple organizations should query the operation with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the Usage API operations for detailed usage instructions and optional parameters. 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.usage.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.thousandeyes.sdk.usage.model.AllocationUnitUsageBreakdown;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * UnitAllocationSummary
 */
@JsonPropertyOrder({
  UnitAllocationSummary.JSON_PROPERTY_USED,
  UnitAllocationSummary.JSON_PROPERTY_PROJECTED,
  UnitAllocationSummary.JSON_PROPERTY_ALLOCATIONS
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class UnitAllocationSummary {
  public static final String JSON_PROPERTY_USED = "used";
  private Long used;

  public static final String JSON_PROPERTY_PROJECTED = "projected";
  private Long projected;

  public static final String JSON_PROPERTY_ALLOCATIONS = "allocations";
  private List<AllocationUnitUsageBreakdown> allocations = new ArrayList<>();

  public UnitAllocationSummary() { 
  }

  public UnitAllocationSummary used(Long used) {
    this.used = used;
    return this;
  }

   /**
   * The total number of allocation units used.
   * @return used
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsed() {
    return used;
  }


  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsed(Long used) {
    this.used = used;
  }


  public UnitAllocationSummary projected(Long projected) {
    this.projected = projected;
    return this;
  }

   /**
   * The total number of projected allocation units.
   * @return projected
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getProjected() {
    return projected;
  }


  @JsonProperty(JSON_PROPERTY_PROJECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjected(Long projected) {
    this.projected = projected;
  }


  public UnitAllocationSummary allocations(List<AllocationUnitUsageBreakdown> allocations) {
    this.allocations = allocations;
    return this;
  }

  public UnitAllocationSummary addAllocationsItem(AllocationUnitUsageBreakdown allocationsItem) {
    if (this.allocations == null) {
      this.allocations = new ArrayList<>();
    }
    this.allocations.add(allocationsItem);
    return this;
  }

   /**
   * Get allocations
   * @return allocations
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AllocationUnitUsageBreakdown> getAllocations() {
    return allocations;
  }


  @JsonProperty(JSON_PROPERTY_ALLOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllocations(List<AllocationUnitUsageBreakdown> allocations) {
    this.allocations = allocations;
  }


  /**
   * Return true if this UnitAllocationSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitAllocationSummary unitAllocationSummary = (UnitAllocationSummary) o;
    return Objects.equals(this.used, unitAllocationSummary.used) &&
        Objects.equals(this.projected, unitAllocationSummary.projected) &&
        Objects.equals(this.allocations, unitAllocationSummary.allocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(used, projected, allocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitAllocationSummary {\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    projected: ").append(toIndentedString(projected)).append("\n");
    sb.append("    allocations: ").append(toIndentedString(allocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

