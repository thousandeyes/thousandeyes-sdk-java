/*
 * Tests API
 * This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.tests;

import com.thousandeyes.api.tests.model.Error;
import com.thousandeyes.api.tests.model.Expand;
import com.thousandeyes.api.tests.model.GetSipServerTests200Response;
import com.thousandeyes.api.tests.model.SipServerTest;
import java.net.URI;
import com.thousandeyes.api.tests.model.UnauthorizedError;
import com.thousandeyes.api.tests.model.UpdateSipServerTest;
import com.thousandeyes.api.tests.model.ValidationError;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * Request and Response model deserialization tests for SipServerApi
 */
public class SipServerApiTest {
    // private final SipServerApi api = new SipServerApi();
    private final ObjectMapper mapper = com.thousandeyes.api.serialization.JSON.getDefault()
                                                                               .getMapper();
    
    /**
     * Create SIP Server test
     * <p>
     * Creates a new SIP Server test. This method requires Account Admin permissions.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    
    @Test
    public void createSipServerTestRequestAndResponseDeserializationTest()
            throws JsonProcessingException 
    {
        String requestBodyJson = """
                { }
                                 """;
        UpdateSipServerTest mappedRequest = 
                mapper.readValue(requestBodyJson, UpdateSipServerTest.class);
        assertNotNull(mappedRequest);

        String responseBodyJson = """
                {
                  "bgpMeasurements" : true,
                  "usePublicBgp" : true,
                  "monitors" : [ {
                    "monitorId" : "1234",
                    "monitorName" : "Seattle, WA",
                    "ipAddress" : "4.69.184.193",
                    "countryId" : "GB",
                    "network" : "Level 3 Communications, Inc. (AS 3356)"
                  }, {
                    "monitorId" : "1234",
                    "monitorName" : "Seattle, WA",
                    "ipAddress" : "4.69.184.193",
                    "countryId" : "GB",
                    "network" : "Level 3 Communications, Inc. (AS 3356)"
                  } ]
                }
                                  """;
        SipServerTest mappedResponse = 
                mapper.readValue(responseBodyJson, SipServerTest.class);
        assertNotNull(mappedResponse);
    }
    
    /**
     * Delete SIP Server test
     * <p>
     * Deletes the specified SIP Server test. This method requires Account Admin permissions.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Disabled
    @Test
    public void deleteSipServerTestRequestAndResponseDeserializationTest()
            throws JsonProcessingException 
    {

    }
    
    /**
     * Get SIP Server test
     * <p>
     * Returns details for a SIP Server test, including name, intervals, targets, alert rules and agents.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    
    @Test
    public void getSipServerTestRequestAndResponseDeserializationTest()
            throws JsonProcessingException 
    {

        String responseBodyJson = """
                {
                  "bgpMeasurements" : true,
                  "usePublicBgp" : true,
                  "monitors" : [ {
                    "monitorId" : "1234",
                    "monitorName" : "Seattle, WA",
                    "ipAddress" : "4.69.184.193",
                    "countryId" : "GB",
                    "network" : "Level 3 Communications, Inc. (AS 3356)"
                  }, {
                    "monitorId" : "1234",
                    "monitorName" : "Seattle, WA",
                    "ipAddress" : "4.69.184.193",
                    "countryId" : "GB",
                    "network" : "Level 3 Communications, Inc. (AS 3356)"
                  } ]
                }
                                  """;
        SipServerTest mappedResponse = 
                mapper.readValue(responseBodyJson, SipServerTest.class);
        assertNotNull(mappedResponse);
    }
    
    /**
     * List SIP Server tests
     * <p>
     * Returns a list of SIP Server tests and saved events.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    
    @Test
    public void getSipServerTestsRequestAndResponseDeserializationTest()
            throws JsonProcessingException 
    {

        String responseBodyJson = """
                {
                  "tests" : [ {
                    "mtuMeasurements" : false,
                    "_links" : {
                      "testResults" : [ {
                        "href" : "https://api.thousandeyes.com/v7/test-results/281474976710706/network"
                      }, {
                        "href" : "https://api.thousandeyes.com/v7/test-results/281474976710706/path-vis"
                      } ],
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "registerEnabled" : false,
                    "description" : "ThousandEyes Test",
                    "type" : "sip-server",
                    "authUser" : "username",
                    "enabled" : true,
                    "fixedPacketRate" : 50,
                    "password" : "password",
                    "modifiedBy" : "user@user.com",
                    "alertsEnabled" : true,
                    "testName" : "ThousandEyes Test",
                    "sipTargetTime" : 3053,
                    "numPathTraces" : 1,
                    "optionsRegex" : "[\\"a-z\\"]",
                    "liveShare" : false,
                    "savedEvent" : true,
                    "sipRegistrar" : "voice.thousandeyes.com",
                    "networkMeasurements" : true,
                    "createdDate" : "2022-07-17T22:00:54Z",
                    "createdBy" : "user@user.com",
                    "modifiedDate" : "2022-07-17T22:00:54Z",
                    "sipTimeLimit" : 5,
                    "interval" : 120,
                    "testId" : "281474976710706",
                    "user" : "username"
                  }, {
                    "mtuMeasurements" : false,
                    "_links" : {
                      "testResults" : [ {
                        "href" : "https://api.thousandeyes.com/v7/test-results/281474976710706/network"
                      }, {
                        "href" : "https://api.thousandeyes.com/v7/test-results/281474976710706/path-vis"
                      } ],
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "registerEnabled" : false,
                    "description" : "ThousandEyes Test",
                    "type" : "sip-server",
                    "authUser" : "username",
                    "enabled" : true,
                    "fixedPacketRate" : 50,
                    "password" : "password",
                    "modifiedBy" : "user@user.com",
                    "alertsEnabled" : true,
                    "testName" : "ThousandEyes Test",
                    "sipTargetTime" : 3053,
                    "numPathTraces" : 1,
                    "optionsRegex" : "[\\"a-z\\"]",
                    "liveShare" : false,
                    "savedEvent" : true,
                    "sipRegistrar" : "voice.thousandeyes.com",
                    "networkMeasurements" : true,
                    "createdDate" : "2022-07-17T22:00:54Z",
                    "createdBy" : "user@user.com",
                    "modifiedDate" : "2022-07-17T22:00:54Z",
                    "sipTimeLimit" : 5,
                    "interval" : 120,
                    "testId" : "281474976710706",
                    "user" : "username"
                  } ],
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  }
                }
                                  """;
        GetSipServerTests200Response mappedResponse = 
                mapper.readValue(responseBodyJson, GetSipServerTests200Response.class);
        assertNotNull(mappedResponse);
    }
    
    /**
     * Update SIP Server test
     * <p>
     * Updates a SIP Server test. The target test cannot be a live share or saved event. This method requires Account Admin permissions.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    
    @Test
    public void updateSipServerTestRequestAndResponseDeserializationTest()
            throws JsonProcessingException 
    {
        String requestBodyJson = """
                { }
                                 """;
        UpdateSipServerTest mappedRequest = 
                mapper.readValue(requestBodyJson, UpdateSipServerTest.class);
        assertNotNull(mappedRequest);

        String responseBodyJson = """
                {
                  "bgpMeasurements" : true,
                  "usePublicBgp" : true,
                  "monitors" : [ {
                    "monitorId" : "1234",
                    "monitorName" : "Seattle, WA",
                    "ipAddress" : "4.69.184.193",
                    "countryId" : "GB",
                    "network" : "Level 3 Communications, Inc. (AS 3356)"
                  }, {
                    "monitorId" : "1234",
                    "monitorName" : "Seattle, WA",
                    "ipAddress" : "4.69.184.193",
                    "countryId" : "GB",
                    "network" : "Level 3 Communications, Inc. (AS 3356)"
                  } ]
                }
                                  """;
        SipServerTest mappedResponse = 
                mapper.readValue(responseBodyJson, SipServerTest.class);
        assertNotNull(mappedResponse);
    }
    
}
