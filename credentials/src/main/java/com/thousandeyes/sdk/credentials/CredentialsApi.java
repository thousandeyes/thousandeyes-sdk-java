/*
 * Credentials API
 * Manage credentials for transaction tests using the Credentials API.  The following permissions are required to access Credentials API endpoints:  * `Settings Tests Read` for read operations. * `Settings Tests Update` for write operations. * `View sensitive data in web transaction scripts` to view the encrypted value property of credentials. * `Settings Tests Create Transaction (Tx) Tests` to create credentials.  For more information about credentials, see [Working With Secure Credentials](https://docs.thousandeyes.com/product-documentation/browser-synthetics/transaction-tests/getting-started/working-with-secure-credentials). 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.thousandeyes.sdk.credentials;

import static com.thousandeyes.sdk.client.RequestUtil.parameterToPairs;
import static com.thousandeyes.sdk.client.RequestUtil.urlEncode;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.ApiResponse;
import com.thousandeyes.sdk.client.ApiRequest;
import com.thousandeyes.sdk.utils.Config;
import org.apache.commons.lang3.tuple.Pair;

import com.thousandeyes.sdk.credentials.model.Credential;
import com.thousandeyes.sdk.credentials.model.CredentialRequest;
import com.thousandeyes.sdk.credentials.model.CredentialWithoutValue;
import com.thousandeyes.sdk.credentials.model.Credentials;
import com.thousandeyes.sdk.credentials.model.Error;
import java.net.URI;
import com.thousandeyes.sdk.credentials.model.UnauthorizedError;
import com.thousandeyes.sdk.credentials.model.ValidationError;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class CredentialsApi {
  private final ApiClient apiClient;

  public CredentialsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create credential
   * Creates a new credential for ThousandEyes transaction tests, based on properties provided in the request data. To create a new credential, you must have permission to update tests.
   * @param credentialRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return CredentialWithoutValue
   * @throws ApiException if fails to make API call
   */
  public CredentialWithoutValue createCredential(CredentialRequest credentialRequest, String aid) throws ApiException {
    ApiResponse<CredentialWithoutValue> response = createCredentialWithHttpInfo(credentialRequest, aid);
    return response.getData();
  }

  /**
   * Create credential
   * Creates a new credential for ThousandEyes transaction tests, based on properties provided in the request data. To create a new credential, you must have permission to update tests.
   * @param credentialRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;CredentialWithoutValue&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CredentialWithoutValue> createCredentialWithHttpInfo(CredentialRequest credentialRequest, String aid) throws ApiException {
    createCredentialValidateRequest(credentialRequest);

    var requestBuilder = createCredentialRequestBuilder(credentialRequest, aid);

    return apiClient.send(requestBuilder.build(), CredentialWithoutValue.class);
  }

  private void createCredentialValidateRequest(CredentialRequest credentialRequest) throws ApiException {
      // verify the required parameter 'credentialRequest' is set
      if (credentialRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'credentialRequest' when calling createCredential");
      }
  }

  private ApiRequest.ApiRequestBuilder createCredentialRequestBuilder(CredentialRequest credentialRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/v7/credentials";
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(credentialRequest);
    return requestBuilder;
  }
  /**
   * Delete credential
   * Deletes a ThousandEyes transaction test credential, using the request parameters. To delete a credential, you must have permission to update tests and access to the credential based on its default or provided account ID.
   * @param id The ID of the desired credential. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @throws ApiException if fails to make API call
   */
  public void deleteCredential(String id, String aid) throws ApiException {
    deleteCredentialWithHttpInfo(id, aid);
  }

  /**
   * Delete credential
   * Deletes a ThousandEyes transaction test credential, using the request parameters. To delete a credential, you must have permission to update tests and access to the credential based on its default or provided account ID.
   * @param id The ID of the desired credential. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteCredentialWithHttpInfo(String id, String aid) throws ApiException {
    deleteCredentialValidateRequest(id);

    var requestBuilder = deleteCredentialRequestBuilder(id, aid);

    return apiClient.send(requestBuilder.build(), Void.class);
  }

  private void deleteCredentialValidateRequest(String id) throws ApiException {
      // verify the required parameter 'id' is set
      if (id == null) {
        throw new ApiException(400, "Missing the required parameter 'id' when calling deleteCredential");
      }
  }

  private ApiRequest.ApiRequestBuilder deleteCredentialRequestBuilder(String id, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("DELETE");

    String path = "/v7/credentials/{id}"
        .replace("{id}", urlEncode(id.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Accept", List.of("application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    return requestBuilder;
  }
  /**
   * Retrieve credential
   * Retrieves detailed information about a ThousandEyes transaction test credential. To access this information, you must have access to the credential based on its default or provided account ID.
   * @param id The ID of the desired credential. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return Credential
   * @throws ApiException if fails to make API call
   */
  public Credential getCredential(String id, String aid) throws ApiException {
    ApiResponse<Credential> response = getCredentialWithHttpInfo(id, aid);
    return response.getData();
  }

  /**
   * Retrieve credential
   * Retrieves detailed information about a ThousandEyes transaction test credential. To access this information, you must have access to the credential based on its default or provided account ID.
   * @param id The ID of the desired credential. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;Credential&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Credential> getCredentialWithHttpInfo(String id, String aid) throws ApiException {
    getCredentialValidateRequest(id);

    var requestBuilder = getCredentialRequestBuilder(id, aid);

    return apiClient.send(requestBuilder.build(), Credential.class);
  }

  private void getCredentialValidateRequest(String id) throws ApiException {
      // verify the required parameter 'id' is set
      if (id == null) {
        throw new ApiException(400, "Missing the required parameter 'id' when calling getCredential");
      }
  }

  private ApiRequest.ApiRequestBuilder getCredentialRequestBuilder(String id, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("GET");

    String path = "/v7/credentials/{id}"
        .replace("{id}", urlEncode(id.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    return requestBuilder;
  }
  /**
   * List credentials
   * Retrieves a list of credentials configured in ThousandEyes. Users have access to the list of credentials based on the default settings or the specified account ID.
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return Credentials
   * @throws ApiException if fails to make API call
   */
  public Credentials getCredentials(String aid) throws ApiException {
    ApiResponse<Credentials> response = getCredentialsWithHttpInfo(aid);
    return response.getData();
  }

  /**
   * List credentials
   * Retrieves a list of credentials configured in ThousandEyes. Users have access to the list of credentials based on the default settings or the specified account ID.
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;Credentials&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Credentials> getCredentialsWithHttpInfo(String aid) throws ApiException {
    getCredentialsValidateRequest();

    var requestBuilder = getCredentialsRequestBuilder(aid);

    return apiClient.send(requestBuilder.build(), Credentials.class);
  }

  private void getCredentialsValidateRequest() throws ApiException {
  }

  private ApiRequest.ApiRequestBuilder getCredentialsRequestBuilder(String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("GET");

    String path = "/v7/credentials";
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    return requestBuilder;
  }
  /**
   * Update credential
   * Updates the credential for ThousandEyes transaction tests, based on properties provided in the request data. To update a credential, you must have permission to update tests and access to the credential based on its default or provided account ID.
   * @param id The ID of the desired credential. (required)
   * @param credentialRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return CredentialWithoutValue
   * @throws ApiException if fails to make API call
   */
  public CredentialWithoutValue updateCredential(String id, CredentialRequest credentialRequest, String aid) throws ApiException {
    ApiResponse<CredentialWithoutValue> response = updateCredentialWithHttpInfo(id, credentialRequest, aid);
    return response.getData();
  }

  /**
   * Update credential
   * Updates the credential for ThousandEyes transaction tests, based on properties provided in the request data. To update a credential, you must have permission to update tests and access to the credential based on its default or provided account ID.
   * @param id The ID of the desired credential. (required)
   * @param credentialRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;CredentialWithoutValue&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CredentialWithoutValue> updateCredentialWithHttpInfo(String id, CredentialRequest credentialRequest, String aid) throws ApiException {
    updateCredentialValidateRequest(id, credentialRequest);

    var requestBuilder = updateCredentialRequestBuilder(id, credentialRequest, aid);

    return apiClient.send(requestBuilder.build(), CredentialWithoutValue.class);
  }

  private void updateCredentialValidateRequest(String id, CredentialRequest credentialRequest) throws ApiException {
      // verify the required parameter 'id' is set
      if (id == null) {
        throw new ApiException(400, "Missing the required parameter 'id' when calling updateCredential");
      }
      // verify the required parameter 'credentialRequest' is set
      if (credentialRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'credentialRequest' when calling updateCredential");
      }
  }

  private ApiRequest.ApiRequestBuilder updateCredentialRequestBuilder(String id, CredentialRequest credentialRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("PUT");

    String path = "/v7/credentials/{id}"
        .replace("{id}", urlEncode(id.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(credentialRequest);
    return requestBuilder;
  }
}
