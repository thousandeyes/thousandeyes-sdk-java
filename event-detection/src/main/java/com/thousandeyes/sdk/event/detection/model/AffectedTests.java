/*
 * Event Detection API
 *  Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection). 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.event.detection.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.thousandeyes.sdk.event.detection.model.EventApiAffectedTest;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AffectedTests
 */
@JsonPropertyOrder({
  AffectedTests.JSON_PROPERTY_TOTAL,
  AffectedTests.JSON_PROPERTY_IN_ACCOUNT_GROUP,
  AffectedTests.JSON_PROPERTY_TESTS
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class AffectedTests {
  public static final String JSON_PROPERTY_TOTAL = "total";
  private Integer total;

  public static final String JSON_PROPERTY_IN_ACCOUNT_GROUP = "inAccountGroup";
  private Integer inAccountGroup;

  public static final String JSON_PROPERTY_TESTS = "tests";
  private Set<EventApiAffectedTest> tests = new LinkedHashSet<>();

  public AffectedTests() { 
  }

  @JsonCreator
  public AffectedTests(
    @JsonProperty(JSON_PROPERTY_TOTAL) Integer total, 
    @JsonProperty(JSON_PROPERTY_IN_ACCOUNT_GROUP) Integer inAccountGroup
  ) {
  this();
    this.total = total;
    this.inAccountGroup = inAccountGroup;
  }

   /**
   * The total number affected.
   * @return total
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotal() {
    return total;
  }




   /**
   * Indicates if in the affected account group.
   * @return inAccountGroup
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IN_ACCOUNT_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInAccountGroup() {
    return inAccountGroup;
  }




  public AffectedTests tests(Set<EventApiAffectedTest> tests) {
    this.tests = tests;
    return this;
  }

  public AffectedTests addTestsItem(EventApiAffectedTest testsItem) {
    if (this.tests == null) {
      this.tests = new LinkedHashSet<>();
    }
    this.tests.add(testsItem);
    return this;
  }

   /**
   * List of affected tests.
   * @return tests
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<EventApiAffectedTest> getTests() {
    return tests;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTests(Set<EventApiAffectedTest> tests) {
    this.tests = tests;
  }


  /**
   * Return true if this AffectedTests object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AffectedTests affectedTests = (AffectedTests) o;
    return Objects.equals(this.total, affectedTests.total) &&
        Objects.equals(this.inAccountGroup, affectedTests.inAccountGroup) &&
        Objects.equals(this.tests, affectedTests.tests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, inAccountGroup, tests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AffectedTests {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    inAccountGroup: ").append(toIndentedString(inAccountGroup)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

