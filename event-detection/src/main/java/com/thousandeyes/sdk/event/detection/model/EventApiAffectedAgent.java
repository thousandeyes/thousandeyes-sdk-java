/*
 * Event Detection API
 *  Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection). 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.event.detection.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.thousandeyes.sdk.event.detection.model.AgentLinks;
import com.thousandeyes.sdk.event.detection.model.CloudEnterpriseAgentType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * EventApiAffectedAgent
 */
@JsonPropertyOrder({
  EventApiAffectedAgent.JSON_PROPERTY_AGENT_ID,
  EventApiAffectedAgent.JSON_PROPERTY_TYPE,
  EventApiAffectedAgent.JSON_PROPERTY_NAME,
  EventApiAffectedAgent.JSON_PROPERTY_LOCATION,
  EventApiAffectedAgent.JSON_PROPERTY_COUNTRY_CODE,
  EventApiAffectedAgent.JSON_PROPERTY_AFFECTED_TARGET_IDS,
  EventApiAffectedAgent.JSON_PROPERTY_AFFECTED_TEST_IDS,
  EventApiAffectedAgent.JSON_PROPERTY_LINKS
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class EventApiAffectedAgent {
  public static final String JSON_PROPERTY_AGENT_ID = "agentId";
  private String agentId;

  public static final String JSON_PROPERTY_TYPE = "type";
  private CloudEnterpriseAgentType type;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public static final String JSON_PROPERTY_COUNTRY_CODE = "countryCode";
  private String countryCode;

  public static final String JSON_PROPERTY_AFFECTED_TARGET_IDS = "affectedTargetIds";
  private List<String> affectedTargetIds = new ArrayList<>();

  public static final String JSON_PROPERTY_AFFECTED_TEST_IDS = "affectedTestIds";
  private List<String> affectedTestIds = new ArrayList<>();

  public static final String JSON_PROPERTY_LINKS = "_links";
  private AgentLinks links;

  public EventApiAffectedAgent() { 
  }

  @JsonCreator
  public EventApiAffectedAgent(
    @JsonProperty(JSON_PROPERTY_AGENT_ID) String agentId, 
    @JsonProperty(JSON_PROPERTY_NAME) String name, 
    @JsonProperty(JSON_PROPERTY_LOCATION) String location, 
    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE) String countryCode
  ) {
  this();
    this.agentId = agentId;
    this.name = name;
    this.location = location;
    this.countryCode = countryCode;
  }

   /**
   * The ID of the virtual agent.
   * @return agentId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AGENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAgentId() {
    return agentId;
  }




  public EventApiAffectedAgent type(CloudEnterpriseAgentType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CloudEnterpriseAgentType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(CloudEnterpriseAgentType type) {
    this.type = type;
  }


   /**
   * The name of the agent as defined in settings.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }




   /**
   * The name of the agent&#39;s location.
   * @return location
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }




   /**
   * The country code of the agent&#39;s location .
   * @return countryCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountryCode() {
    return countryCode;
  }




  public EventApiAffectedAgent affectedTargetIds(List<String> affectedTargetIds) {
    this.affectedTargetIds = affectedTargetIds;
    return this;
  }

  public EventApiAffectedAgent addAffectedTargetIdsItem(String affectedTargetIdsItem) {
    if (this.affectedTargetIds == null) {
      this.affectedTargetIds = new ArrayList<>();
    }
    this.affectedTargetIds.add(affectedTargetIdsItem);
    return this;
  }

   /**
   * An array of unique target IDs that contributed data points which generated the signal for the event.
   * @return affectedTargetIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFFECTED_TARGET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAffectedTargetIds() {
    return affectedTargetIds;
  }


  @JsonProperty(JSON_PROPERTY_AFFECTED_TARGET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffectedTargetIds(List<String> affectedTargetIds) {
    this.affectedTargetIds = affectedTargetIds;
  }


  public EventApiAffectedAgent affectedTestIds(List<String> affectedTestIds) {
    this.affectedTestIds = affectedTestIds;
    return this;
  }

  public EventApiAffectedAgent addAffectedTestIdsItem(String affectedTestIdsItem) {
    if (this.affectedTestIds == null) {
      this.affectedTestIds = new ArrayList<>();
    }
    this.affectedTestIds.add(affectedTestIdsItem);
    return this;
  }

   /**
   * An array of unique agent IDs that contributed data points which generated the signal for the event.
   * @return affectedTestIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFFECTED_TEST_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAffectedTestIds() {
    return affectedTestIds;
  }


  @JsonProperty(JSON_PROPERTY_AFFECTED_TEST_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffectedTestIds(List<String> affectedTestIds) {
    this.affectedTestIds = affectedTestIds;
  }


  public EventApiAffectedAgent links(AgentLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AgentLinks getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(AgentLinks links) {
    this.links = links;
  }


  /**
   * Return true if this EventApiAffectedAgent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventApiAffectedAgent eventApiAffectedAgent = (EventApiAffectedAgent) o;
    return Objects.equals(this.agentId, eventApiAffectedAgent.agentId) &&
        Objects.equals(this.type, eventApiAffectedAgent.type) &&
        Objects.equals(this.name, eventApiAffectedAgent.name) &&
        Objects.equals(this.location, eventApiAffectedAgent.location) &&
        Objects.equals(this.countryCode, eventApiAffectedAgent.countryCode) &&
        Objects.equals(this.affectedTargetIds, eventApiAffectedAgent.affectedTargetIds) &&
        Objects.equals(this.affectedTestIds, eventApiAffectedAgent.affectedTestIds) &&
        Objects.equals(this.links, eventApiAffectedAgent.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, type, name, location, countryCode, affectedTargetIds, affectedTestIds, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventApiAffectedAgent {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    affectedTargetIds: ").append(toIndentedString(affectedTargetIds)).append("\n");
    sb.append("    affectedTestIds: ").append(toIndentedString(affectedTestIds)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

