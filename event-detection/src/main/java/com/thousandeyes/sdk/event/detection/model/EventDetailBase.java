/*
 * Event Detection API
 *  Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection). 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.event.detection.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.thousandeyes.sdk.event.detection.model.AffectedAgents;
import com.thousandeyes.sdk.event.detection.model.AffectedTargets;
import com.thousandeyes.sdk.event.detection.model.AffectedTests;
import com.thousandeyes.sdk.event.detection.model.EventAlertSeverity;
import com.thousandeyes.sdk.event.detection.model.EventState;
import com.thousandeyes.sdk.event.detection.model.SelfLinks;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * EventDetailBase
 */
@JsonPropertyOrder({
  EventDetailBase.JSON_PROPERTY_ID,
  EventDetailBase.JSON_PROPERTY_TYPE_NAME,
  EventDetailBase.JSON_PROPERTY_STATE,
  EventDetailBase.JSON_PROPERTY_START_DATE,
  EventDetailBase.JSON_PROPERTY_END_DATE,
  EventDetailBase.JSON_PROPERTY_SEVERITY,
  EventDetailBase.JSON_PROPERTY_AID,
  EventDetailBase.JSON_PROPERTY_SUMMARY,
  EventDetailBase.JSON_PROPERTY_AFFECTED_TESTS,
  EventDetailBase.JSON_PROPERTY_AFFECTED_TARGETS,
  EventDetailBase.JSON_PROPERTY_AFFECTED_AGENTS,
  EventDetailBase.JSON_PROPERTY_CAUSE,
  EventDetailBase.JSON_PROPERTY_LINKS
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class EventDetailBase {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_TYPE_NAME = "typeName";
  private String typeName;

  public static final String JSON_PROPERTY_STATE = "state";
  private EventState state;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private OffsetDateTime startDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private OffsetDateTime endDate;

  public static final String JSON_PROPERTY_SEVERITY = "severity";
  private EventAlertSeverity severity;

  public static final String JSON_PROPERTY_AID = "aid";
  private String aid;

  public static final String JSON_PROPERTY_SUMMARY = "summary";
  private String summary;

  public static final String JSON_PROPERTY_AFFECTED_TESTS = "affectedTests";
  private AffectedTests affectedTests;

  public static final String JSON_PROPERTY_AFFECTED_TARGETS = "affectedTargets";
  private AffectedTargets affectedTargets;

  public static final String JSON_PROPERTY_AFFECTED_AGENTS = "affectedAgents";
  private AffectedAgents affectedAgents;

  public static final String JSON_PROPERTY_CAUSE = "cause";
  private Set<String> cause = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_LINKS = "_links";
  private SelfLinks links;

  public EventDetailBase() { 
  }

  @JsonCreator
  public EventDetailBase(
    @JsonProperty(JSON_PROPERTY_ID) UUID id, 
    @JsonProperty(JSON_PROPERTY_TYPE_NAME) String typeName, 
    @JsonProperty(JSON_PROPERTY_START_DATE) OffsetDateTime startDate, 
    @JsonProperty(JSON_PROPERTY_END_DATE) OffsetDateTime endDate, 
    @JsonProperty(JSON_PROPERTY_SUMMARY) String summary
  ) {
  this();
    this.id = id;
    this.typeName = typeName;
    this.startDate = startDate;
    this.endDate = endDate;
    this.summary = summary;
  }

   /**
   * A unique ID for each event.
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getId() {
    return id;
  }




   /**
   * Event type name. Examples include, Local Agent Issue, Network Path Issue, Network Outage, DNS Issue, Server Issue, and Proxy Issue.
   * @return typeName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeName() {
    return typeName;
  }




  public EventDetailBase state(EventState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EventState getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(EventState state) {
    this.state = state;
  }


   /**
   * The start date and time (in UTC, ISO 8601 format) when the event was first detected.
   * @return startDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStartDate() {
    return startDate;
  }




   /**
   * The end date and time (in UTC, ISO 8601 format) when the event was resolved (due to timeout). This value is populated for \&quot;ongoing\&quot; events.
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEndDate() {
    return endDate;
  }




  public EventDetailBase severity(EventAlertSeverity severity) {
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EventAlertSeverity getSeverity() {
    return severity;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeverity(EventAlertSeverity severity) {
    this.severity = severity;
  }


  public EventDetailBase aid(String aid) {
    this.aid = aid;
    return this;
  }

   /**
   * A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint.
   * @return aid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAid() {
    return aid;
  }


  @JsonProperty(JSON_PROPERTY_AID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAid(String aid) {
    this.aid = aid;
  }


   /**
   * A brief summary describing the cause of the event.
   * @return summary
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSummary() {
    return summary;
  }




  public EventDetailBase affectedTests(AffectedTests affectedTests) {
    this.affectedTests = affectedTests;
    return this;
  }

   /**
   * Get affectedTests
   * @return affectedTests
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFFECTED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AffectedTests getAffectedTests() {
    return affectedTests;
  }


  @JsonProperty(JSON_PROPERTY_AFFECTED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffectedTests(AffectedTests affectedTests) {
    this.affectedTests = affectedTests;
  }


  public EventDetailBase affectedTargets(AffectedTargets affectedTargets) {
    this.affectedTargets = affectedTargets;
    return this;
  }

   /**
   * Get affectedTargets
   * @return affectedTargets
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFFECTED_TARGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AffectedTargets getAffectedTargets() {
    return affectedTargets;
  }


  @JsonProperty(JSON_PROPERTY_AFFECTED_TARGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffectedTargets(AffectedTargets affectedTargets) {
    this.affectedTargets = affectedTargets;
  }


  public EventDetailBase affectedAgents(AffectedAgents affectedAgents) {
    this.affectedAgents = affectedAgents;
    return this;
  }

   /**
   * Get affectedAgents
   * @return affectedAgents
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFFECTED_AGENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AffectedAgents getAffectedAgents() {
    return affectedAgents;
  }


  @JsonProperty(JSON_PROPERTY_AFFECTED_AGENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffectedAgents(AffectedAgents affectedAgents) {
    this.affectedAgents = affectedAgents;
  }


  public EventDetailBase cause(Set<String> cause) {
    this.cause = cause;
    return this;
  }

  public EventDetailBase addCauseItem(String causeItem) {
    if (this.cause == null) {
      this.cause = new LinkedHashSet<>();
    }
    this.cause.add(causeItem);
    return this;
  }

   /**
   * The cause of the error.
   * @return cause
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAUSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getCause() {
    return cause;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CAUSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCause(Set<String> cause) {
    this.cause = cause;
  }


  public EventDetailBase links(SelfLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SelfLinks getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(SelfLinks links) {
    this.links = links;
  }


  /**
   * Return true if this EventDetailBase object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDetailBase eventDetailBase = (EventDetailBase) o;
    return Objects.equals(this.id, eventDetailBase.id) &&
        Objects.equals(this.typeName, eventDetailBase.typeName) &&
        Objects.equals(this.state, eventDetailBase.state) &&
        Objects.equals(this.startDate, eventDetailBase.startDate) &&
        Objects.equals(this.endDate, eventDetailBase.endDate) &&
        Objects.equals(this.severity, eventDetailBase.severity) &&
        Objects.equals(this.aid, eventDetailBase.aid) &&
        Objects.equals(this.summary, eventDetailBase.summary) &&
        Objects.equals(this.affectedTests, eventDetailBase.affectedTests) &&
        Objects.equals(this.affectedTargets, eventDetailBase.affectedTargets) &&
        Objects.equals(this.affectedAgents, eventDetailBase.affectedAgents) &&
        Objects.equals(this.cause, eventDetailBase.cause) &&
        Objects.equals(this.links, eventDetailBase.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeName, state, startDate, endDate, severity, aid, summary, affectedTests, affectedTargets, affectedAgents, cause, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDetailBase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    aid: ").append(toIndentedString(aid)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    affectedTests: ").append(toIndentedString(affectedTests)).append("\n");
    sb.append("    affectedTargets: ").append(toIndentedString(affectedTargets)).append("\n");
    sb.append("    affectedAgents: ").append(toIndentedString(affectedAgents)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

