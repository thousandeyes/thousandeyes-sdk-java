/*
 * Event Detection API
 *  Event detection occurs when ThousandEyes identifies that error signals related to a component (proxy, network node, AS, server etc) have deviated from the baselines established by events. * To determine this, ThousandEyes takes the test results from all accounts groups within an organization, and analyzes that data. * Noisy test results (those that have too many errors in a short window) are removed until they stabilize, and the rest of the results are tagged with the components associated with that test result (for example, proxy, network, or server). * Next, any increase in failures from the test results and each component helps in determining the problem domain and which component may be at fault. * When this failure rate increases beyond a pre-defined threshold (set by the algorithm), an event is triggered and an email notification is sent to the user (if they've enabled email alerts).  With the Events API, you can perform the following tasks on the ThousandEyes platform: * **Retrieve Events**: Obtain a list of events and detailed information for each event. For more information about events, see [Event Detection](https://docs.thousandeyes.com/product-documentation/event-detection). 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.event.detection.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NetworkEventGrouping
 */
@JsonPropertyOrder({
  NetworkEventGrouping.JSON_PROPERTY_SOURCE_ASN,
  NetworkEventGrouping.JSON_PROPERTY_DEST_ASN,
  NetworkEventGrouping.JSON_PROPERTY_SOURCE_COUNTRY_CODE
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class NetworkEventGrouping {
  public static final String JSON_PROPERTY_SOURCE_ASN = "sourceAsn";
  private Integer sourceAsn;

  public static final String JSON_PROPERTY_DEST_ASN = "destAsn";
  private Integer destAsn;

  public static final String JSON_PROPERTY_SOURCE_COUNTRY_CODE = "sourceCountryCode";
  private String sourceCountryCode;

  public NetworkEventGrouping() { 
  }

  @JsonCreator
  public NetworkEventGrouping(
    @JsonProperty(JSON_PROPERTY_SOURCE_ASN) Integer sourceAsn, 
    @JsonProperty(JSON_PROPERTY_DEST_ASN) Integer destAsn, 
    @JsonProperty(JSON_PROPERTY_SOURCE_COUNTRY_CODE) String sourceCountryCode
  ) {
  this();
    this.sourceAsn = sourceAsn;
    this.destAsn = destAsn;
    this.sourceCountryCode = sourceCountryCode;
  }

   /**
   * AS number of the source network (for network-pop and network events).
   * @return sourceAsn
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_ASN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSourceAsn() {
    return sourceAsn;
  }




   /**
   * AS number of the destination network (for network events).
   * @return destAsn
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEST_ASN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDestAsn() {
    return destAsn;
  }




   /**
   * The source network&#39;s country code (for network-pop and network events).
   * @return sourceCountryCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceCountryCode() {
    return sourceCountryCode;
  }




  /**
   * Return true if this NetworkEventGrouping object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkEventGrouping networkEventGrouping = (NetworkEventGrouping) o;
    return Objects.equals(this.sourceAsn, networkEventGrouping.sourceAsn) &&
        Objects.equals(this.destAsn, networkEventGrouping.destAsn) &&
        Objects.equals(this.sourceCountryCode, networkEventGrouping.sourceCountryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceAsn, destAsn, sourceCountryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkEventGrouping {\n");
    sb.append("    sourceAsn: ").append(toIndentedString(sourceAsn)).append("\n");
    sb.append("    destAsn: ").append(toIndentedString(destAsn)).append("\n");
    sb.append("    sourceCountryCode: ").append(toIndentedString(sourceCountryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

