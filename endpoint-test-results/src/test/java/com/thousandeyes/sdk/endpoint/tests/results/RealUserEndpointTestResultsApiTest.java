/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.endpoint.tests.results;

import com.thousandeyes.sdk.endpoint.tests.results.model.Error;
import java.time.OffsetDateTime;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestDetailResults;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestNetworkResults;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestPageDetailResult;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestPageResults;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestResultRequestFilter;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestResults;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestResultsRequest;
import com.thousandeyes.sdk.endpoint.tests.results.model.UnauthorizedError;
import com.thousandeyes.sdk.endpoint.tests.results.model.ValidationError;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestNetworkResult;
import com.thousandeyes.sdk.pagination.Paginator;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTest;
import com.thousandeyes.sdk.pagination.Paginator;
import com.thousandeyes.sdk.endpoint.tests.results.model.RealUserEndpointTestPageResult;
import com.thousandeyes.sdk.pagination.Paginator;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.common.ContentTypes.AUTHORIZATION;
import static com.github.tomakehurst.wiremock.common.ContentTypes.CONTENT_TYPE;
import static com.thousandeyes.sdk.serialization.JSON.getDefault;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
import com.github.tomakehurst.wiremock.junit5.WireMockTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.NativeApiClient;


/**
 * Request and Response model deserialization tests for RealUserEndpointTestResultsApi
 */
@WireMockTest
public class RealUserEndpointTestResultsApiTest {
    private static final String TOKEN = "valid-token";
    private static final String BEARER_TOKEN = "Bearer %s".formatted(TOKEN);
    private static RealUserEndpointTestResultsApi api;
    private final ObjectMapper mapper = getDefault()
            .getMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

    @BeforeAll
    public static void setup(WireMockRuntimeInfo wireMockRuntimeInfo) {
        ApiClient client = NativeApiClient.builder()
                                .baseUri(wireMockRuntimeInfo.getHttpBaseUrl())
                                .bearerToken(TOKEN)
                                .build();
        api = new RealUserEndpointTestResultsApi(client);
    }
    
    /**
     * List endpoint real user tests
     * <p>
     * Returns a list of all endpoint real user tests.  Sessions from the last round are provided unless an explicit start and end is provided with &#x60;startDate&#x60;, &#x60;endDate&#x60; or &#x60;window&#x60; optional parameters.  ## Request body filters This endpoint supports complex filtering using the request body. It is important these filters remain unaltered when making use of pagination, otherwise the results will not be coherent with the original request.  ### Multiple filter fields When multiple filter fields are provided, a logical &#x60;AND&#x60; is applied between the filters.  &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/networks/filter&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{    \&quot;searchFilters\&quot;: {     \&quot;platform\&quot;: [ \&quot;mac\&quot; ],     \&quot;domain\&quot;: [ \&quot;thousandeyes.com\&quot; ]   }}&#39; &#x60;&#x60;&#x60;  ### Filter field with multiple values When a filter field contains multiple values, a logical &#x60;OR&#x60; is applied between the filter values.  &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/networks/filter&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{   \&quot;searchFilters\&quot;: {     \&quot;networkId\&quot;: [ \&quot;660b34109d12\&quot;, \&quot;660b34109d15\&quot; ]   }}&#39; &#x60;&#x60;&#x60;  ### Combination of request parameters and body filters &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/networks/filter?window&#x3D;1w&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{   \&quot;searchFilters\&quot;: {     \&quot;platform\&quot;: [ \&quot;mac\&quot; ],     \&quot;domain\&quot;: [ \&quot;thousandeyes.com\&quot; ],     \&quot;networkId\&quot;: [ \&quot;660b34109d12\&quot;, \&quot;660b34109d15\&quot; ]   }}&#39; &#x60;&#x60;&#x60;  Returns a &#x60;results&#x60; array of endpoint real user tests.  Network sessions shown are from the latest round, or based on the time range specified. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void filterRealUserTestsNetworkResultsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "searchFilters" : {
                    "agentId" : [ "3fde6422-f119-40e1-ae32-d08a1243c038", "236e6f18-9637-4a2f-b15f-7aa6a29c9fce" ],
                    "bssid" : [ "8c:68:c8:a5:0a:8c", "0c:51:01:e4:3e:d0" ],
                    "visitedSite" : [ "app.thousandeyes.com" ],
                    "trigger" : [ "user" ],
                    "ssid" : [ "wifi-name", "other-room-wifi" ],
                    "platform" : [ "mac", "mac" ],
                    "proxyTarget" : [ "78.153.54.204", "78.153.54.206" ],
                    "destinationIp" : [ "84.255.241.1", "193.2.1.88" ],
                    "domain" : [ "thousandeyes.com" ],
                    "location" : [ "San Francisco Bay Area", "Germany" ],
                    "connection" : [ "wireless", "wireless" ],
                    "vpnTarget" : [ "78.153.54.204", "78.153.54.206" ],
                    "networkId" : [ "660b34109d12", "660b34109d15" ],
                    "gateway" : [ "78.153.54.204", "78.153.54.206" ]
                  }
                }
                                 """;
        var requestBodyContentType = "application/json";
        RealUserEndpointTestResultsRequest mappedRequest = 
                mapper.readValue(requestBodyJson, RealUserEndpointTestResultsRequest.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "endDate" : "2022-07-18T22:00:54Z",
                  "_links" : {
                    "next" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "results" : [ {
                    "date" : "2022-07-17T22:00:54Z",
                    "proxy" : {
                      "loss" : 0.1,
                      "jitter" : 46,
                      "latency" : 150,
                      "target" : "54.208.6.220"
                    },
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "systemMetrics" : {
                      "cpuUtilization" : {
                        "min" : 0.22,
                        "median" : 0.61,
                        "max" : 0.75,
                        "mean" : 0.55,
                        "count" : 150,
                        "stdDev" : 0.01
                      },
                      "physicalMemoryTotalBytes" : 1024,
                      "startTimeMs" : 1581508857327,
                      "physicalMemoryUsedBytes" : {
                        "min" : 1.2,
                        "median" : 1.85,
                        "max" : 2.5,
                        "mean" : 1.77,
                        "count" : 155,
                        "stdDev" : 0.25
                      },
                      "endTimeMs" : 1581508867333
                    },
                    "vpn" : {
                      "loss" : 0.1,
                      "jitter" : 46,
                      "latency" : 150,
                      "target" : "54.208.6.220"
                    },
                    "destination" : {
                      "loss" : 0.1,
                      "jitter" : 46,
                      "latency" : 150,
                      "target" : "54.208.6.220"
                    },
                    "id" : "07625:1490529480:aVDViw0i",
                    "roundId" : 1384309800
                  }, {
                    "date" : "2022-07-17T22:00:54Z",
                    "proxy" : {
                      "loss" : 0.1,
                      "jitter" : 46,
                      "latency" : 150,
                      "target" : "54.208.6.220"
                    },
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "systemMetrics" : {
                      "cpuUtilization" : {
                        "min" : 0.22,
                        "median" : 0.61,
                        "max" : 0.75,
                        "mean" : 0.55,
                        "count" : 150,
                        "stdDev" : 0.01
                      },
                      "physicalMemoryTotalBytes" : 1024,
                      "startTimeMs" : 1581508857327,
                      "physicalMemoryUsedBytes" : {
                        "min" : 1.2,
                        "median" : 1.85,
                        "max" : 2.5,
                        "mean" : 1.77,
                        "count" : 155,
                        "stdDev" : 0.25
                      },
                      "endTimeMs" : 1581508867333
                    },
                    "vpn" : {
                      "loss" : 0.1,
                      "jitter" : 46,
                      "latency" : 150,
                      "target" : "54.208.6.220"
                    },
                    "destination" : {
                      "loss" : 0.1,
                      "jitter" : 46,
                      "latency" : 150,
                      "target" : "54.208.6.220"
                    },
                    "id" : "07625:1490529480:aVDViw0i",
                    "roundId" : 1384309800
                  } ],
                  "startDate" : "2022-07-17T22:00:54Z"
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        RealUserEndpointTestNetworkResults mappedResponse = 
                mapper.readValue(responseBodyJson, RealUserEndpointTestNetworkResults.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/test-results/real-user-tests/networks/filter";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.filterRealUserTestsNetworkResults(null, null, null, null, null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * List endpoint real user tests
     * <p>
     * Returns a list of all endpoint real user tests. Results from the last round are provided unless an explicit start and end is provided with &#x60;startDate&#x60;, &#x60;endDate&#x60; or &#x60;window&#x60; optional parameters.  ## Request body filters This endpoint supports complex filtering using the request body. It is important these filters remain unaltered when making use of pagination, otherwise the results will not be coherent with the original request.  ### Multiple filter fields When multiple filter fields are provided, a logical &#x60;AND&#x60; is applied between the filters.  &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/filter&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{   \&quot;searchFilters\&quot;: {     \&quot;platform\&quot;: [ \&quot;mac\&quot; ],     \&quot;domain\&quot;: [ \&quot;thousandeyes.com\&quot; ]   }}&#39; &#x60;&#x60;&#x60;  ### Filter field with multiple values When a filter field contains multiple values, a logical &#x60;OR&#x60; is applied between the filter values.  &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/filter&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{     \&quot;searchFilters\&quot;: {       \&quot;networkId\&quot;: [ \&quot;660b34109d12\&quot;, \&quot;660b34109d15\&quot; ]     }   }&#39; &#x60;&#x60;&#x60;  ### Combination of request parameters and body filters &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/filter?window&#x3D;1w&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{     \&quot;searchFilters\&quot;: {       \&quot;platform\&quot;: [ \&quot;mac\&quot; ],       \&quot;domain\&quot;: [ \&quot;thousandeyes.com\&quot; ],       \&quot;networkId\&quot;: [ \&quot;660b34109d12\&quot;, \&quot;660b34109d15\&quot; ]     }   }&#39; &#x60;&#x60;&#x60;  Returns a &#x60;results&#x60; array of endpoint real user tests. Either the latest results, or based on the time range and body filters specified. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void filterRealUserTestsResultsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "searchFilters" : {
                    "agentId" : [ "3fde6422-f119-40e1-ae32-d08a1243c038", "236e6f18-9637-4a2f-b15f-7aa6a29c9fce" ],
                    "bssid" : [ "8c:68:c8:a5:0a:8c", "0c:51:01:e4:3e:d0" ],
                    "visitedSite" : [ "app.thousandeyes.com" ],
                    "trigger" : [ "user" ],
                    "ssid" : [ "wifi-name", "other-room-wifi" ],
                    "platform" : [ "mac", "mac" ],
                    "proxyTarget" : [ "78.153.54.204", "78.153.54.206" ],
                    "destinationIp" : [ "84.255.241.1", "193.2.1.88" ],
                    "domain" : [ "thousandeyes.com" ],
                    "location" : [ "San Francisco Bay Area", "Germany" ],
                    "connection" : [ "wireless", "wireless" ],
                    "vpnTarget" : [ "78.153.54.204", "78.153.54.206" ],
                    "networkId" : [ "660b34109d12", "660b34109d15" ],
                    "gateway" : [ "78.153.54.204", "78.153.54.206" ]
                  }
                }
                                 """;
        var requestBodyContentType = "application/json";
        RealUserEndpointTestResultsRequest mappedRequest = 
                mapper.readValue(requestBodyJson, RealUserEndpointTestResultsRequest.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "endDate" : "2022-07-18T22:00:54Z",
                  "_links" : {
                    "next" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "results" : [ {
                    "date" : "2022-07-17T22:00:54Z",
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "committed" : "2022-07-17T22:00:54Z",
                    "experienceScore" : 0.5,
                    "sourceAddress" : "84.255.241.1",
                    "organizationName" : "T-2 Access Network",
                    "visitedSite" : "www.thousandeyes.com",
                    "pageId" : "C31gBrYJ",
                    "protocol" : "https",
                    "numberOfPages" : 2,
                    "port" : 443,
                    "id" : "07625:1490529480:aVDViw0i",
                    "roundId" : 1384309800
                  }, {
                    "date" : "2022-07-17T22:00:54Z",
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "committed" : "2022-07-17T22:00:54Z",
                    "experienceScore" : 0.5,
                    "sourceAddress" : "84.255.241.1",
                    "organizationName" : "T-2 Access Network",
                    "visitedSite" : "www.thousandeyes.com",
                    "pageId" : "C31gBrYJ",
                    "protocol" : "https",
                    "numberOfPages" : 2,
                    "port" : 443,
                    "id" : "07625:1490529480:aVDViw0i",
                    "roundId" : 1384309800
                  } ],
                  "startDate" : "2022-07-17T22:00:54Z"
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        RealUserEndpointTestResults mappedResponse = 
                mapper.readValue(responseBodyJson, RealUserEndpointTestResults.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/test-results/real-user-tests/filter";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.filterRealUserTestsResults(null, null, null, null, null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * List endpoint real user tests visited pages
     * <p>
     * Returns a list of all endpoint real user tests visited pages.  Sessions from the last round are provided unless an explicit start and end is provided with &#x60;startDate&#x60;, &#x60;endDate&#x60; or &#x60;window&#x60; optional parameters.  ## Request body filters This endpoint supports complex filtering using the request body. It is important these filters remain unaltered when making use of pagination, otherwise the results will not be coherent with the original request.  ### Multiple filter fields When multiple filter fields are provided, a logical &#x60;AND&#x60; is applied between the filters.  &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/pages/filter&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{   \&quot;searchFilters\&quot;: {     \&quot;platform\&quot;: [ \&quot;mac\&quot; ],     \&quot;domain\&quot;: [ \&quot;thousandeyes.com\&quot; ]   }}&#39; &#x60;&#x60;&#x60;  ### Filter field with multiple values When a filter field contains multiple values, a logical &#x60;OR&#x60; is applied between the filter values.  &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/pages/filter&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{   \&quot;searchFilters\&quot;: {     \&quot;networkId\&quot;: [ \&quot;660b34109d12\&quot;, \&quot;660b34109d15\&quot; ]   }}&#39; &#x60;&#x60;&#x60;  ### Combination of request parameters and body filters &#x60;&#x60;&#x60; curl --location --request POST &#39;https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/pages/filter?window&#x3D;1w&#39; --header &#39;Authorization: Bearer $token&#39; --header &#39;Content-Type: application/json&#39; --data-raw &#39;{   \&quot;searchFilters\&quot;: {     \&quot;platform\&quot;: [ \&quot;mac\&quot; ],     \&quot;domain\&quot;: [ \&quot;thousandeyes.com\&quot; ],     \&quot;networkId\&quot;: [ \&quot;660b34109d12\&quot;, \&quot;660b34109d15\&quot; ]   }}&#39; &#x60;&#x60;&#x60;  Returns a &#x60;results&#x60; array of user loaded pages in an endpoint real user test.  Pages shown are from the latest round, or based on the time range specified. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void filterRealUserTestsVisitedPagesResultsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "agentId" : [ "3fde6422-f119-40e1-ae32-d08a1243c038", "236e6f18-9637-4a2f-b15f-7aa6a29c9fce" ],
                  "bssid" : [ "8c:68:c8:a5:0a:8c", "0c:51:01:e4:3e:d0" ],
                  "visitedSite" : [ "app.thousandeyes.com" ],
                  "trigger" : [ "user" ],
                  "ssid" : [ "wifi-name", "other-room-wifi" ],
                  "platform" : [ "mac", "mac" ],
                  "proxyTarget" : [ "78.153.54.204", "78.153.54.206" ],
                  "destinationIp" : [ "84.255.241.1", "193.2.1.88" ],
                  "domain" : [ "thousandeyes.com" ],
                  "location" : [ "San Francisco Bay Area", "Germany" ],
                  "connection" : [ "wireless", "wireless" ],
                  "vpnTarget" : [ "78.153.54.204", "78.153.54.206" ],
                  "networkId" : [ "660b34109d12", "660b34109d15" ],
                  "gateway" : [ "78.153.54.204", "78.153.54.206" ]
                }
                                 """;
        var requestBodyContentType = "application/json";
        RealUserEndpointTestResultRequestFilter mappedRequest = 
                mapper.readValue(requestBodyJson, RealUserEndpointTestResultRequestFilter.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "endDate" : "2022-07-18T22:00:54Z",
                  "_links" : {
                    "next" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "results" : [ {
                    "pageTimings" : {
                      "onContentLoad" : 1483,
                      "onLoad" : 4569
                    },
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "systemMetrics" : {
                      "cpuUtilization" : {
                        "min" : 0.22,
                        "median" : 0.61,
                        "max" : 0.75,
                        "mean" : 0.55,
                        "count" : 150,
                        "stdDev" : 0.01
                      },
                      "physicalMemoryTotalBytes" : 1024,
                      "startTimeMs" : 1581508857327,
                      "physicalMemoryUsedBytes" : {
                        "min" : 1.2,
                        "median" : 1.85,
                        "max" : 2.5,
                        "mean" : 1.77,
                        "count" : 155,
                        "stdDev" : 0.25
                      },
                      "endTimeMs" : 1581508867333
                    },
                    "pageTitle" : "Network Performance Resources | ThousandEyes",
                    "responseTime" : 240,
                    "pageUrl" : "https://app.thousandeyes.com/settings/integrations",
                    "id" : "07625:1490529480:aVDViw0i",
                    "pageId" : "C31gBrYJ",
                    "roundId" : 1384309800,
                    "loadDate" : "2022-07-17T22:00:54Z",
                    "responseCode" : 200
                  }, {
                    "pageTimings" : {
                      "onContentLoad" : 1483,
                      "onLoad" : 4569
                    },
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "systemMetrics" : {
                      "cpuUtilization" : {
                        "min" : 0.22,
                        "median" : 0.61,
                        "max" : 0.75,
                        "mean" : 0.55,
                        "count" : 150,
                        "stdDev" : 0.01
                      },
                      "physicalMemoryTotalBytes" : 1024,
                      "startTimeMs" : 1581508857327,
                      "physicalMemoryUsedBytes" : {
                        "min" : 1.2,
                        "median" : 1.85,
                        "max" : 2.5,
                        "mean" : 1.77,
                        "count" : 155,
                        "stdDev" : 0.25
                      },
                      "endTimeMs" : 1581508867333
                    },
                    "pageTitle" : "Network Performance Resources | ThousandEyes",
                    "responseTime" : 240,
                    "pageUrl" : "https://app.thousandeyes.com/settings/integrations",
                    "id" : "07625:1490529480:aVDViw0i",
                    "pageId" : "C31gBrYJ",
                    "roundId" : 1384309800,
                    "loadDate" : "2022-07-17T22:00:54Z",
                    "responseCode" : 200
                  } ],
                  "startDate" : "2022-07-17T22:00:54Z"
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        RealUserEndpointTestPageResults mappedResponse = 
                mapper.readValue(responseBodyJson, RealUserEndpointTestPageResults.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/test-results/real-user-tests/pages/filter";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.filterRealUserTestsVisitedPagesResults(null, null, null, null, null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Retrieve endpoint real user test page
     * <p>
     * Returns details for endpoint real user test web page request.  Provides complete waterfall information with all object requests.  Sends back detailed endpoint real user test web page request.  Returned object has a single field: &#x60;har&#x60; which is an HAR object according to the HTTP Archive 1.2 specifications.  [You can read more about the specification](http://www.softwareishard.com/blog/har-12-spec/).  In addition to standard fields, the object har includes a custom property &#x60;systemMetrics&#x60; which contain metrics about CPU and physical memory usage.  Check &#x60;SystemMetrics&#x60; on schemas tab for more information. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getRealUserTestPageResultsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "07625:1490529480:h3qJQTpl";
        String pageId = "281474976710706";


        var responseBodyJson = """
                {
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "har" : {
                    "log" : {
                      "browser" : {
                        "name" : "Google Chrome",
                        "version" : "7.0.25.98"
                      },
                      "creator" : {
                        "name" : "ThousandEyes Endpoint Agent",
                        "version" : "7.0.25"
                      },
                      "entries" : [ {
                        "pageref" : "page_1",
                        "request" : {
                          "headers" : [ {
                            "name" : "Upgrade-Insecure-Requests",
                            "value" : "1"
                          }, {
                            "name" : "User-Agent",
                            "value" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36"
                          }, {
                            "name" : "Accept",
                            "value" : "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
                          }, {
                            "name" : "Referer",
                            "value" : "https://www.thousandeyes.com/"
                          }, {
                            "name" : "Accept-Encoding",
                            "value" : "gzip, deflate, sdch, br"
                          }, {
                            "name" : "Accept-Language",
                            "value" : "en-US,en;q=0.6"
                          }, {
                            "name" : "Cookie",
                            "value" : "(removed)"
                          } ],
                          "method" : "GET",
                          "queryString" : [ {
                            "name" : "locale",
                            "value" : "en-US"
                          } ],
                          "url" : "https://www.thousandeyes.com/resources"
                        },
                        "response" : {
                          "bodySize" : 17776,
                          "content" : {
                            "mimeType" : "text/html;charset=ISO-8859-1",
                            "size" : 17776
                          },
                          "headers" : [ {
                            "name" : "Content-Type",
                            "value" : "text/html;charset=ISO-8859-1"
                          }, {
                            "name" : "Content-Length",
                            "value" : "17776"
                          }, {
                            "name" : "Connection",
                            "value" : "keep-alive"
                          }, {
                            "name" : "Date",
                            "value" : "Sun, 26 Mar 2017 11:58:54 GMT"
                          }, {
                            "name" : "Server",
                            "value" : "Apache"
                          }, {
                            "name" : "Cache-Control",
                            "value" : "max-age=600, must-revalidate"
                          }, {
                            "name" : "Content-Language",
                            "value" : "en-US"
                          }, {
                            "name" : "Content-Encoding",
                            "value" : "gzip"
                          }, {
                            "name" : "X-Frame-Options",
                            "value" : "sameorigin"
                          }, {
                            "name" : "Strict-Transport-Security",
                            "value" : "max-age=31536000"
                          }, {
                            "name" : "Vary",
                            "value" : "Accept-Encoding"
                          }, {
                            "name" : "X-Cache",
                            "value" : "Miss from cloudfront"
                          }, {
                            "name" : "Via",
                            "value" : "1.1 5dbe09af3a2c87121e31ffa67f174f66.cloudfront.net (CloudFront)"
                          }, {
                            "name" : "X-Amz-Cf-Id",
                            "value" : "YkvlkBNKgHt5aMu9vcS22Z8kHn1MUr-8adupwhDk3j9vF-TpSyIxZA=="
                          } ],
                          "headersSize" : 527,
                          "redirectURL" : "",
                          "status" : 200,
                          "statusText" : "OK"
                        },
                        "serverIPAddress" : "13.32.22.80",
                        "startedDateTime" : "2017-03-22T11:58:54.123+02:00",
                        "time" : 177,
                        "timings" : {
                          "blocked" : -1,
                          "connect" : -1,
                          "dns" : -1,
                          "receive" : 27,
                          "send" : -1,
                          "ssl" : -1,
                          "wait" : 150
                        }
                      }, {
                        "pageref" : "page_1",
                        "request" : {
                          "headers" : [ {
                            "name" : "User-Agent",
                            "value" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36"
                          }, {
                            "name" : "Accept",
                            "value" : "*/*"
                          }, {
                            "name" : "Referer",
                            "value" : "https://www.thousandeyes.com/resources"
                          }, {
                            "name" : "Accept-Encoding",
                            "value" : "gzip, deflate, sdch, br"
                          }, {
                            "name" : "Accept-Language",
                            "value" : "en-US,en;q=0.6"
                          } ],
                          "method" : "GET",
                          "queryString" : [ ],
                          "url" : "https://use.typekit.net/cjy5myw.js"
                        },
                        "response" : {
                          "bodySize" : 0,
                          "content" : {
                            "mimeType" : "text/javascript;charset=utf-8",
                            "size" : 7814
                          },
                          "headers" : [ {
                            "name" : "status",
                            "value" : "200"
                          }, {
                            "name" : "access-control-allow-origin",
                            "value" : "*"
                          }, {
                            "name" : "cache-control",
                            "value" : "public, max-age=600, stale-while-revalidate=604800"
                          }, {
                            "name" : "content-encoding",
                            "value" : "gzip"
                          }, {
                            "name" : "content-type",
                            "value" : "text/javascript;charset=utf-8"
                          }, {
                            "name" : "server",
                            "value" : "nginx"
                          }, {
                            "name" : "status",
                            "value" : "200 OK"
                          }, {
                            "name" : "timing-allow-origin",
                            "value" : "*"
                          }, {
                            "name" : "vary",
                            "value" : "Accept-Encoding"
                          }, {
                            "name" : "content-length",
                            "value" : "7814"
                          }, {
                            "name" : "date",
                            "value" : "Sun, 26 Mar 2017 11:58:43 GMT"
                          } ],
                          "headersSize" : 334,
                          "redirectURL" : "",
                          "status" : 200,
                          "statusText" : "OK"
                        },
                        "serverIPAddress" : "104.103.103.234",
                        "startedDateTime" : "2017-03-22T11:58:54.123+02:00",
                        "time" : 72,
                        "timings" : {
                          "blocked" : -1,
                          "connect" : -1,
                          "dns" : -1,
                          "receive" : 10,
                          "send" : -1,
                          "ssl" : -1,
                          "wait" : 62
                        }
                      } ],
                      "pages" : [ {
                        "id" : "page_1",
                        "pageTimings" : {
                          "onContentLoad" : 874,
                          "onLoad" : 3492
                        },
                        "responseCode" : 200,
                        "startedDateTime" : "2017-03-22T11:58:54.123+02:00",
                        "title" : "Network Performance Resources | ThousandEyes"
                      } ],
                      "version" : "1.2",
                      "systemMetrics" : {
                        "startTimeMs" : 1581508857327,
                        "endTimeMs" : 1581508867333,
                        "cpuUtilization" : {
                          "min" : 0.30859375,
                          "max" : 0.5625,
                          "mean" : 0.38931831001805056,
                          "median" : 0.353515625,
                          "stdDev" : 0.08389194281742307,
                          "count" : 10
                        },
                        "physicalMemoryUsedBytes" : {
                          "min" : 1.2805128192E10,
                          "max" : 1.2825530368E10,
                          "mean" : 1.281914582109091E10,
                          "median" : 1.2818219008E10,
                          "stdDev" : 5741124.05691331,
                          "count" : 11
                        },
                        "physicalMemoryTotalBytes" : 17069891584
                      }
                    }
                  }
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        RealUserEndpointTestPageDetailResult mappedResponse = 
                mapper.readValue(responseBodyJson, RealUserEndpointTestPageDetailResult.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/test-results/real-user-tests/{id}/pages/{pageId}";
        stubFor(get(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withPathParam("pageId", equalTo(URLEncoder.encode(pageId, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getRealUserTestPageResults(id, pageId, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Retrieve endpoint real user test
     * <p>
     * Provides details for an endpoint real user test. Returns a results array containing detailed information about endpoint real user tests.\&quot; 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getRealUserTestResultsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "07625:1490529480:h3qJQTpl";


        var responseBodyJson = """
                {
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "results" : [ {
                    "date" : "2022-07-17T22:00:54Z",
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "committed" : "2022-07-17T22:00:54Z",
                    "experienceScore" : 0.5,
                    "sourceAddress" : "84.255.241.1",
                    "organizationName" : "T-2 Access Network",
                    "visitedSite" : "www.thousandeyes.com",
                    "coordinates" : {
                      "latitude" : 46.0552778,
                      "location" : "Slovenia",
                      "longitude" : 14.5144444
                    },
                    "network" : {
                      "systemMetrics" : {
                        "cpuUtilization" : {
                          "min" : 0.22,
                          "median" : 0.61,
                          "max" : 0.75,
                          "mean" : 0.55,
                          "count" : 150,
                          "stdDev" : 0.01
                        },
                        "physicalMemoryTotalBytes" : 1024,
                        "startTimeMs" : 1581508857327,
                        "physicalMemoryUsedBytes" : {
                          "min" : 1.2,
                          "median" : 1.85,
                          "max" : 2.5,
                          "mean" : 1.77,
                          "count" : 155,
                          "stdDev" : 0.25
                        },
                        "endTimeMs" : 1581508867333
                      },
                      "isIcmpBlocked" : true,
                      "vpnPing" : {
                        "maxRtt" : 66,
                        "pktsReceived" : 10,
                        "avgRtt" : 7,
                        "meanDevRtt" : 11,
                        "minRtt" : 1,
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "pktsSent" : 10
                      },
                      "ping" : {
                        "maxRtt" : 66,
                        "pktsReceived" : 10,
                        "avgRtt" : 7,
                        "meanDevRtt" : 11,
                        "minRtt" : 1,
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "pktsSent" : 10
                      },
                      "networkProfile" : {
                        "previousInterface" : {
                          "publicIpAddress" : "84.255.241.1",
                          "publicIpRange" : "84.255.241.0-84.255.241.255",
                          "ipAddress" : "10.0.0.13",
                          "hardwareType" : "wireless",
                          "localPrefix" : "10.0.0.0",
                          "interfaceName" : "en0",
                          "subnetMask" : "255.255.255.0",
                          "dnsServers" : [ "8.8.8.8", "8.8.8.4" ]
                        },
                        "ethernetProfile" : {
                          "linkSpeed" : 860
                        },
                        "publicIpAddress" : "84.255.241.1",
                        "publicIpRange" : "84.255.241.0-84.255.241.255",
                        "ipAddress" : "10.0.0.13",
                        "hardwareType" : "wireless",
                        "localPrefix" : "10.0.0.0",
                        "proxyProfile" : {
                          "method" : "System",
                          "proxies" : [ {
                            "bypass" : "*.local;169.254/16",
                            "proxy" : "<direct>"
                          }, {
                            "bypass" : "*.local;169.254/16",
                            "proxy" : "<direct>"
                          } ]
                        },
                        "subnetMask" : "255.255.255.0",
                        "error" : "An operation timed out.",
                        "wirelessProfile" : {
                          "rssi" : -38,
                          "bssid" : "4c:ba:ba:f4:fa:fa",
                          "vendor" : "Cisco",
                          "txRate" : 130,
                          "channel" : 1,
                          "noise" : -95,
                          "phyMode" : "802.11n",
                          "ssid" : "Internet for the masses",
                          "quality" : 100
                        },
                        "interfaceName" : "en0",
                        "dnsServers" : [ "8.8.8.8", "8.8.8.4" ],
                        "gateway" : "10.0.0.1"
                      },
                      "traceroute" : {
                        "destination" : "13.32.22.232",
                        "hops" : [ {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        }, {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        } ],
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "internalErrors" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ]
                      },
                      "vpnTraceroute" : {
                        "destination" : "13.32.22.232",
                        "hops" : [ {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        }, {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        } ],
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "internalErrors" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ]
                      },
                      "connectRtt" : 77.777,
                      "gatewayPing" : {
                        "maxRtt" : 66,
                        "pktsReceived" : 10,
                        "avgRtt" : 7,
                        "meanDevRtt" : 11,
                        "minRtt" : 1,
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "pktsSent" : 10
                      },
                      "errors" : [ "ping: Request timed out before getting response" ]
                    },
                    "protocol" : "https",
                    "pages" : [ {
                      "pageTimings" : {
                        "onContentLoad" : 1483,
                        "onLoad" : 4569
                      },
                      "pageTitle" : "Network Performance Resources | ThousandEyes",
                      "pageUrl" : "https://app.thousandeyes.com/settings/integrations",
                      "pageId" : "C31gBrYJ",
                      "loadDate" : "2022-07-17T22:00:54Z",
                      "responseCode" : 200
                    }, {
                      "pageTimings" : {
                        "onContentLoad" : 1483,
                        "onLoad" : 4569
                      },
                      "pageTitle" : "Network Performance Resources | ThousandEyes",
                      "pageUrl" : "https://app.thousandeyes.com/settings/integrations",
                      "pageId" : "C31gBrYJ",
                      "loadDate" : "2022-07-17T22:00:54Z",
                      "responseCode" : 200
                    } ],
                    "numberOfPages" : 2,
                    "port" : 443,
                    "browser" : {
                      "name" : "Google Chrome",
                      "version" : "116.0.0.0"
                    },
                    "id" : "07625:1490529480:aVDViw0i",
                    "roundId" : 1384309800
                  }, {
                    "date" : "2022-07-17T22:00:54Z",
                    "agentId" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "committed" : "2022-07-17T22:00:54Z",
                    "experienceScore" : 0.5,
                    "sourceAddress" : "84.255.241.1",
                    "organizationName" : "T-2 Access Network",
                    "visitedSite" : "www.thousandeyes.com",
                    "coordinates" : {
                      "latitude" : 46.0552778,
                      "location" : "Slovenia",
                      "longitude" : 14.5144444
                    },
                    "network" : {
                      "systemMetrics" : {
                        "cpuUtilization" : {
                          "min" : 0.22,
                          "median" : 0.61,
                          "max" : 0.75,
                          "mean" : 0.55,
                          "count" : 150,
                          "stdDev" : 0.01
                        },
                        "physicalMemoryTotalBytes" : 1024,
                        "startTimeMs" : 1581508857327,
                        "physicalMemoryUsedBytes" : {
                          "min" : 1.2,
                          "median" : 1.85,
                          "max" : 2.5,
                          "mean" : 1.77,
                          "count" : 155,
                          "stdDev" : 0.25
                        },
                        "endTimeMs" : 1581508867333
                      },
                      "isIcmpBlocked" : true,
                      "vpnPing" : {
                        "maxRtt" : 66,
                        "pktsReceived" : 10,
                        "avgRtt" : 7,
                        "meanDevRtt" : 11,
                        "minRtt" : 1,
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "pktsSent" : 10
                      },
                      "ping" : {
                        "maxRtt" : 66,
                        "pktsReceived" : 10,
                        "avgRtt" : 7,
                        "meanDevRtt" : 11,
                        "minRtt" : 1,
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "pktsSent" : 10
                      },
                      "networkProfile" : {
                        "previousInterface" : {
                          "publicIpAddress" : "84.255.241.1",
                          "publicIpRange" : "84.255.241.0-84.255.241.255",
                          "ipAddress" : "10.0.0.13",
                          "hardwareType" : "wireless",
                          "localPrefix" : "10.0.0.0",
                          "interfaceName" : "en0",
                          "subnetMask" : "255.255.255.0",
                          "dnsServers" : [ "8.8.8.8", "8.8.8.4" ]
                        },
                        "ethernetProfile" : {
                          "linkSpeed" : 860
                        },
                        "publicIpAddress" : "84.255.241.1",
                        "publicIpRange" : "84.255.241.0-84.255.241.255",
                        "ipAddress" : "10.0.0.13",
                        "hardwareType" : "wireless",
                        "localPrefix" : "10.0.0.0",
                        "proxyProfile" : {
                          "method" : "System",
                          "proxies" : [ {
                            "bypass" : "*.local;169.254/16",
                            "proxy" : "<direct>"
                          }, {
                            "bypass" : "*.local;169.254/16",
                            "proxy" : "<direct>"
                          } ]
                        },
                        "subnetMask" : "255.255.255.0",
                        "error" : "An operation timed out.",
                        "wirelessProfile" : {
                          "rssi" : -38,
                          "bssid" : "4c:ba:ba:f4:fa:fa",
                          "vendor" : "Cisco",
                          "txRate" : 130,
                          "channel" : 1,
                          "noise" : -95,
                          "phyMode" : "802.11n",
                          "ssid" : "Internet for the masses",
                          "quality" : 100
                        },
                        "interfaceName" : "en0",
                        "dnsServers" : [ "8.8.8.8", "8.8.8.4" ],
                        "gateway" : "10.0.0.1"
                      },
                      "traceroute" : {
                        "destination" : "13.32.22.232",
                        "hops" : [ {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        }, {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        } ],
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "internalErrors" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ]
                      },
                      "vpnTraceroute" : {
                        "destination" : "13.32.22.232",
                        "hops" : [ {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        }, {
                          "delay" : 5,
                          "prefix" : "196.40.96.0/20",
                          "hop" : 1,
                          "ipAddress" : "196.40.106.237",
                          "name" : "89-210-88-65.access.t-2.net",
                          "mpls" : [ "L=301472,E=0,S=1,T=1" ],
                          "asn" : 34779
                        } ],
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "internalErrors" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ]
                      },
                      "connectRtt" : 77.777,
                      "gatewayPing" : {
                        "maxRtt" : 66,
                        "pktsReceived" : 10,
                        "avgRtt" : 7,
                        "meanDevRtt" : 11,
                        "minRtt" : 1,
                        "error" : "An operation timed out.",
                        "infoFlags" : [ "TE_INFO_ICMP_BLOCKED_BY_FIREWALL" ],
                        "pktsSent" : 10
                      },
                      "errors" : [ "ping: Request timed out before getting response" ]
                    },
                    "protocol" : "https",
                    "pages" : [ {
                      "pageTimings" : {
                        "onContentLoad" : 1483,
                        "onLoad" : 4569
                      },
                      "pageTitle" : "Network Performance Resources | ThousandEyes",
                      "pageUrl" : "https://app.thousandeyes.com/settings/integrations",
                      "pageId" : "C31gBrYJ",
                      "loadDate" : "2022-07-17T22:00:54Z",
                      "responseCode" : 200
                    }, {
                      "pageTimings" : {
                        "onContentLoad" : 1483,
                        "onLoad" : 4569
                      },
                      "pageTitle" : "Network Performance Resources | ThousandEyes",
                      "pageUrl" : "https://app.thousandeyes.com/settings/integrations",
                      "pageId" : "C31gBrYJ",
                      "loadDate" : "2022-07-17T22:00:54Z",
                      "responseCode" : 200
                    } ],
                    "numberOfPages" : 2,
                    "port" : 443,
                    "browser" : {
                      "name" : "Google Chrome",
                      "version" : "116.0.0.0"
                    },
                    "id" : "07625:1490529480:aVDViw0i",
                    "roundId" : 1384309800
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        RealUserEndpointTestDetailResults mappedResponse = 
                mapper.readValue(responseBodyJson, RealUserEndpointTestDetailResults.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/test-results/real-user-tests/{id}";
        stubFor(get(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getRealUserTestResults(id, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
}
