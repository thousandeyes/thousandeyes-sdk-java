/*
 * Tests API
 * This API allows you to list, create, edit, and delete Network and Application Synthetics tests. 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.tests.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.thousandeyes.sdk.tests.model.SelfLinks;
import com.thousandeyes.sdk.tests.model.TestVersionHistory;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TestVersionHistoryResponse
 */
@JsonPropertyOrder({
  TestVersionHistoryResponse.JSON_PROPERTY_LINKS,
  TestVersionHistoryResponse.JSON_PROPERTY_TEST_VERSION_HISTORY
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class TestVersionHistoryResponse {
  public static final String JSON_PROPERTY_LINKS = "_links";
  private SelfLinks links;

  public static final String JSON_PROPERTY_TEST_VERSION_HISTORY = "testVersionHistory";
  private List<TestVersionHistory> testVersionHistory = new ArrayList<>();

  public TestVersionHistoryResponse() { 
  }

  public TestVersionHistoryResponse links(SelfLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SelfLinks getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(SelfLinks links) {
    this.links = links;
  }


  public TestVersionHistoryResponse testVersionHistory(List<TestVersionHistory> testVersionHistory) {
    this.testVersionHistory = testVersionHistory;
    return this;
  }

  public TestVersionHistoryResponse addTestVersionHistoryItem(TestVersionHistory testVersionHistoryItem) {
    if (this.testVersionHistory == null) {
      this.testVersionHistory = new ArrayList<>();
    }
    this.testVersionHistory.add(testVersionHistoryItem);
    return this;
  }

   /**
   * Get testVersionHistory
   * @return testVersionHistory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_VERSION_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TestVersionHistory> getTestVersionHistory() {
    return testVersionHistory;
  }


  @JsonProperty(JSON_PROPERTY_TEST_VERSION_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestVersionHistory(List<TestVersionHistory> testVersionHistory) {
    this.testVersionHistory = testVersionHistory;
  }


  /**
   * Return true if this TestVersionHistoryResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestVersionHistoryResponse testVersionHistoryResponse = (TestVersionHistoryResponse) o;
    return Objects.equals(this.links, testVersionHistoryResponse.links) &&
        Objects.equals(this.testVersionHistory, testVersionHistoryResponse.testVersionHistory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, testVersionHistory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestVersionHistoryResponse {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    testVersionHistory: ").append(toIndentedString(testVersionHistory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

