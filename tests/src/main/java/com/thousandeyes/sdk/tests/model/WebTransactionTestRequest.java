/*
 * Tests API
 * This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.tests.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.thousandeyes.sdk.tests.model.AgentInterfaces;
import com.thousandeyes.sdk.tests.model.OAuth;
import com.thousandeyes.sdk.tests.model.TestAgentRequest;
import com.thousandeyes.sdk.tests.model.TestAuthType;
import com.thousandeyes.sdk.tests.model.TestCustomHeaders;
import com.thousandeyes.sdk.tests.model.TestInterval;
import com.thousandeyes.sdk.tests.model.TestLinks;
import com.thousandeyes.sdk.tests.model.TestPageLoadingStrategy;
import com.thousandeyes.sdk.tests.model.TestPathTraceMode;
import com.thousandeyes.sdk.tests.model.TestProbeMode;
import com.thousandeyes.sdk.tests.model.TestProtocol;
import com.thousandeyes.sdk.tests.model.TestSslVersionId;
import com.thousandeyes.sdk.tests.model.TestSubInterval;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * WebTransactionTestRequest
 */
@JsonPropertyOrder({
  WebTransactionTestRequest.JSON_PROPERTY_INTERVAL,
  WebTransactionTestRequest.JSON_PROPERTY_ALERTS_ENABLED,
  WebTransactionTestRequest.JSON_PROPERTY_ENABLED,
  WebTransactionTestRequest.JSON_PROPERTY_ALERT_RULES,
  WebTransactionTestRequest.JSON_PROPERTY_CREATED_BY,
  WebTransactionTestRequest.JSON_PROPERTY_CREATED_DATE,
  WebTransactionTestRequest.JSON_PROPERTY_DESCRIPTION,
  WebTransactionTestRequest.JSON_PROPERTY_LIVE_SHARE,
  WebTransactionTestRequest.JSON_PROPERTY_MODIFIED_BY,
  WebTransactionTestRequest.JSON_PROPERTY_MODIFIED_DATE,
  WebTransactionTestRequest.JSON_PROPERTY_SAVED_EVENT,
  WebTransactionTestRequest.JSON_PROPERTY_TEST_ID,
  WebTransactionTestRequest.JSON_PROPERTY_TEST_NAME,
  WebTransactionTestRequest.JSON_PROPERTY_TYPE,
  WebTransactionTestRequest.JSON_PROPERTY_LINKS,
  WebTransactionTestRequest.JSON_PROPERTY_LABELS,
  WebTransactionTestRequest.JSON_PROPERTY_SHARED_WITH_ACCOUNTS,
  WebTransactionTestRequest.JSON_PROPERTY_AUTH_TYPE,
  WebTransactionTestRequest.JSON_PROPERTY_AGENT_INTERFACES,
  WebTransactionTestRequest.JSON_PROPERTY_BANDWIDTH_MEASUREMENTS,
  WebTransactionTestRequest.JSON_PROPERTY_CLIENT_CERTIFICATE,
  WebTransactionTestRequest.JSON_PROPERTY_CONTENT_REGEX,
  WebTransactionTestRequest.JSON_PROPERTY_CUSTOM_HEADERS,
  WebTransactionTestRequest.JSON_PROPERTY_DESIRED_STATUS_CODE,
  WebTransactionTestRequest.JSON_PROPERTY_DOWNLOAD_LIMIT,
  WebTransactionTestRequest.JSON_PROPERTY_DNS_OVERRIDE,
  WebTransactionTestRequest.JSON_PROPERTY_HTTP_TARGET_TIME,
  WebTransactionTestRequest.JSON_PROPERTY_HTTP_TIME_LIMIT,
  WebTransactionTestRequest.JSON_PROPERTY_HTTP_VERSION,
  WebTransactionTestRequest.JSON_PROPERTY_INCLUDE_HEADERS,
  WebTransactionTestRequest.JSON_PROPERTY_MTU_MEASUREMENTS,
  WebTransactionTestRequest.JSON_PROPERTY_NETWORK_MEASUREMENTS,
  WebTransactionTestRequest.JSON_PROPERTY_NUM_PATH_TRACES,
  WebTransactionTestRequest.JSON_PROPERTY_O_AUTH,
  WebTransactionTestRequest.JSON_PROPERTY_PASSWORD,
  WebTransactionTestRequest.JSON_PROPERTY_PATH_TRACE_MODE,
  WebTransactionTestRequest.JSON_PROPERTY_PROBE_MODE,
  WebTransactionTestRequest.JSON_PROPERTY_PROTOCOL,
  WebTransactionTestRequest.JSON_PROPERTY_SSL_VERSION,
  WebTransactionTestRequest.JSON_PROPERTY_SSL_VERSION_ID,
  WebTransactionTestRequest.JSON_PROPERTY_URL,
  WebTransactionTestRequest.JSON_PROPERTY_USE_NTLM,
  WebTransactionTestRequest.JSON_PROPERTY_USER_AGENT,
  WebTransactionTestRequest.JSON_PROPERTY_USERNAME,
  WebTransactionTestRequest.JSON_PROPERTY_VERIFY_CERTIFICATE,
  WebTransactionTestRequest.JSON_PROPERTY_ALLOW_UNSAFE_LEGACY_RENEGOTIATION,
  WebTransactionTestRequest.JSON_PROPERTY_FOLLOW_REDIRECTS,
  WebTransactionTestRequest.JSON_PROPERTY_FIXED_PACKET_RATE,
  WebTransactionTestRequest.JSON_PROPERTY_OVERRIDE_AGENT_PROXY,
  WebTransactionTestRequest.JSON_PROPERTY_OVERRIDE_PROXY_ID,
  WebTransactionTestRequest.JSON_PROPERTY_COLLECT_PROXY_NETWORK_DATA,
  WebTransactionTestRequest.JSON_PROPERTY_EMULATED_DEVICE_ID,
  WebTransactionTestRequest.JSON_PROPERTY_TARGET_TIME,
  WebTransactionTestRequest.JSON_PROPERTY_TIME_LIMIT,
  WebTransactionTestRequest.JSON_PROPERTY_TRANSACTION_SCRIPT,
  WebTransactionTestRequest.JSON_PROPERTY_BLOCK_DOMAINS,
  WebTransactionTestRequest.JSON_PROPERTY_DISABLE_SCREENSHOT,
  WebTransactionTestRequest.JSON_PROPERTY_ALLOW_MIC_AND_CAMERA,
  WebTransactionTestRequest.JSON_PROPERTY_ALLOW_GEOLOCATION,
  WebTransactionTestRequest.JSON_PROPERTY_BROWSER_LANGUAGE,
  WebTransactionTestRequest.JSON_PROPERTY_PAGE_LOADING_STRATEGY,
  WebTransactionTestRequest.JSON_PROPERTY_CREDENTIALS,
  WebTransactionTestRequest.JSON_PROPERTY_BGP_MEASUREMENTS,
  WebTransactionTestRequest.JSON_PROPERTY_USE_PUBLIC_BGP,
  WebTransactionTestRequest.JSON_PROPERTY_MONITORS,
  WebTransactionTestRequest.JSON_PROPERTY_SUBINTERVAL,
  WebTransactionTestRequest.JSON_PROPERTY_AGENTS
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class WebTransactionTestRequest {
  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private TestInterval interval = TestInterval.NUMBER_60;

  public static final String JSON_PROPERTY_ALERTS_ENABLED = "alertsEnabled";
  private Boolean alertsEnabled;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled = true;

  public static final String JSON_PROPERTY_ALERT_RULES = "alertRules";
  private List<String> alertRules = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATED_BY = "createdBy";
  private String createdBy;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_LIVE_SHARE = "liveShare";
  private Boolean liveShare;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_MODIFIED_DATE = "modifiedDate";
  private OffsetDateTime modifiedDate;

  public static final String JSON_PROPERTY_SAVED_EVENT = "savedEvent";
  private Boolean savedEvent;

  public static final String JSON_PROPERTY_TEST_ID = "testId";
  private String testId;

  public static final String JSON_PROPERTY_TEST_NAME = "testName";
  private String testName;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private TestLinks links;

  public static final String JSON_PROPERTY_LABELS = "labels";
  private List<String> labels = new ArrayList<>();

  public static final String JSON_PROPERTY_SHARED_WITH_ACCOUNTS = "sharedWithAccounts";
  private List<String> sharedWithAccounts = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTH_TYPE = "authType";
  private TestAuthType authType = TestAuthType.NONE;

  public static final String JSON_PROPERTY_AGENT_INTERFACES = "agentInterfaces";
  private AgentInterfaces agentInterfaces;

  public static final String JSON_PROPERTY_BANDWIDTH_MEASUREMENTS = "bandwidthMeasurements";
  private Boolean bandwidthMeasurements;

  public static final String JSON_PROPERTY_CLIENT_CERTIFICATE = "clientCertificate";
  private String clientCertificate;

  public static final String JSON_PROPERTY_CONTENT_REGEX = "contentRegex";
  private String contentRegex;

  public static final String JSON_PROPERTY_CUSTOM_HEADERS = "customHeaders";
  private TestCustomHeaders customHeaders;

  public static final String JSON_PROPERTY_DESIRED_STATUS_CODE = "desiredStatusCode";
  private String desiredStatusCode = "default";

  public static final String JSON_PROPERTY_DOWNLOAD_LIMIT = "downloadLimit";
  private Integer downloadLimit;

  public static final String JSON_PROPERTY_DNS_OVERRIDE = "dnsOverride";
  private String dnsOverride;

  public static final String JSON_PROPERTY_HTTP_TARGET_TIME = "httpTargetTime";
  private Integer httpTargetTime;

  public static final String JSON_PROPERTY_HTTP_TIME_LIMIT = "httpTimeLimit";
  private Integer httpTimeLimit = 5;

  public static final String JSON_PROPERTY_HTTP_VERSION = "httpVersion";
  private Integer httpVersion = 2;

  public static final String JSON_PROPERTY_INCLUDE_HEADERS = "includeHeaders";
  private Boolean includeHeaders = true;

  public static final String JSON_PROPERTY_MTU_MEASUREMENTS = "mtuMeasurements";
  private Boolean mtuMeasurements;

  public static final String JSON_PROPERTY_NETWORK_MEASUREMENTS = "networkMeasurements";
  private Boolean networkMeasurements = true;

  public static final String JSON_PROPERTY_NUM_PATH_TRACES = "numPathTraces";
  private Integer numPathTraces = 3;

  public static final String JSON_PROPERTY_O_AUTH = "oAuth";
  private OAuth oAuth;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_PATH_TRACE_MODE = "pathTraceMode";
  private TestPathTraceMode pathTraceMode = TestPathTraceMode.CLASSIC;

  public static final String JSON_PROPERTY_PROBE_MODE = "probeMode";
  private TestProbeMode probeMode = TestProbeMode.AUTO;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  private TestProtocol protocol = TestProtocol.TCP;

  public static final String JSON_PROPERTY_SSL_VERSION = "sslVersion";
  private String sslVersion;

  public static final String JSON_PROPERTY_SSL_VERSION_ID = "sslVersionId";
  private TestSslVersionId sslVersionId = TestSslVersionId._0;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_USE_NTLM = "useNtlm";
  private Boolean useNtlm;

  public static final String JSON_PROPERTY_USER_AGENT = "userAgent";
  private String userAgent;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_VERIFY_CERTIFICATE = "verifyCertificate";
  private Boolean verifyCertificate = false;

  public static final String JSON_PROPERTY_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = "allowUnsafeLegacyRenegotiation";
  private Boolean allowUnsafeLegacyRenegotiation = true;

  public static final String JSON_PROPERTY_FOLLOW_REDIRECTS = "followRedirects";
  private Boolean followRedirects = true;

  public static final String JSON_PROPERTY_FIXED_PACKET_RATE = "fixedPacketRate";
  private Integer fixedPacketRate;

  public static final String JSON_PROPERTY_OVERRIDE_AGENT_PROXY = "overrideAgentProxy";
  private Boolean overrideAgentProxy = false;

  public static final String JSON_PROPERTY_OVERRIDE_PROXY_ID = "overrideProxyId";
  private String overrideProxyId;

  public static final String JSON_PROPERTY_COLLECT_PROXY_NETWORK_DATA = "collectProxyNetworkData";
  private Boolean collectProxyNetworkData = false;

  public static final String JSON_PROPERTY_EMULATED_DEVICE_ID = "emulatedDeviceId";
  private String emulatedDeviceId;

  public static final String JSON_PROPERTY_TARGET_TIME = "targetTime";
  private Integer targetTime;

  public static final String JSON_PROPERTY_TIME_LIMIT = "timeLimit";
  private Integer timeLimit = 30;

  public static final String JSON_PROPERTY_TRANSACTION_SCRIPT = "transactionScript";
  private String transactionScript;

  public static final String JSON_PROPERTY_BLOCK_DOMAINS = "blockDomains";
  private String blockDomains;

  public static final String JSON_PROPERTY_DISABLE_SCREENSHOT = "disableScreenshot";
  private Boolean disableScreenshot = false;

  public static final String JSON_PROPERTY_ALLOW_MIC_AND_CAMERA = "allowMicAndCamera";
  private Boolean allowMicAndCamera = false;

  public static final String JSON_PROPERTY_ALLOW_GEOLOCATION = "allowGeolocation";
  private Boolean allowGeolocation = false;

  public static final String JSON_PROPERTY_BROWSER_LANGUAGE = "browserLanguage";
  private String browserLanguage;

  public static final String JSON_PROPERTY_PAGE_LOADING_STRATEGY = "pageLoadingStrategy";
  private TestPageLoadingStrategy pageLoadingStrategy = TestPageLoadingStrategy.NORMAL;

  public static final String JSON_PROPERTY_CREDENTIALS = "credentials";
  private List<String> credentials = new ArrayList<>();

  public static final String JSON_PROPERTY_BGP_MEASUREMENTS = "bgpMeasurements";
  private Boolean bgpMeasurements = true;

  public static final String JSON_PROPERTY_USE_PUBLIC_BGP = "usePublicBgp";
  private Boolean usePublicBgp = true;

  public static final String JSON_PROPERTY_MONITORS = "monitors";
  private List<String> monitors = new ArrayList<>();

  public static final String JSON_PROPERTY_SUBINTERVAL = "subinterval";
  private TestSubInterval subinterval;

  public static final String JSON_PROPERTY_AGENTS = "agents";
  private List<TestAgentRequest> agents = new ArrayList<>();

  public WebTransactionTestRequest() { 
  }

  @JsonCreator
  public WebTransactionTestRequest(
    @JsonProperty(JSON_PROPERTY_CREATED_BY) String createdBy, 
    @JsonProperty(JSON_PROPERTY_CREATED_DATE) OffsetDateTime createdDate, 
    @JsonProperty(JSON_PROPERTY_LIVE_SHARE) Boolean liveShare, 
    @JsonProperty(JSON_PROPERTY_MODIFIED_BY) String modifiedBy, 
    @JsonProperty(JSON_PROPERTY_MODIFIED_DATE) OffsetDateTime modifiedDate, 
    @JsonProperty(JSON_PROPERTY_SAVED_EVENT) Boolean savedEvent, 
    @JsonProperty(JSON_PROPERTY_TEST_ID) String testId, 
    @JsonProperty(JSON_PROPERTY_TYPE) String type, 
    @JsonProperty(JSON_PROPERTY_SSL_VERSION) String sslVersion
  ) {
  this();
    this.createdBy = createdBy;
    this.createdDate = createdDate;
    this.liveShare = liveShare;
    this.modifiedBy = modifiedBy;
    this.modifiedDate = modifiedDate;
    this.savedEvent = savedEvent;
    this.testId = testId;
    this.type = type;
    this.sslVersion = sslVersion;
  }

  public WebTransactionTestRequest interval(TestInterval interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TestInterval getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterval(TestInterval interval) {
    this.interval = interval;
  }


  public WebTransactionTestRequest alertsEnabled(Boolean alertsEnabled) {
    this.alertsEnabled = alertsEnabled;
    return this;
  }

   /**
   * Indicates if alerts are enabled.
   * @return alertsEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALERTS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAlertsEnabled() {
    return alertsEnabled;
  }


  @JsonProperty(JSON_PROPERTY_ALERTS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlertsEnabled(Boolean alertsEnabled) {
    this.alertsEnabled = alertsEnabled;
  }


  public WebTransactionTestRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Test is enabled.
   * @return enabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public WebTransactionTestRequest alertRules(List<String> alertRules) {
    this.alertRules = alertRules;
    return this;
  }

  public WebTransactionTestRequest addAlertRulesItem(String alertRulesItem) {
    if (this.alertRules == null) {
      this.alertRules = new ArrayList<>();
    }
    this.alertRules.add(alertRulesItem);
    return this;
  }

   /**
   * List of alert rules IDs to apply to the test (get &#x60;ruleId&#x60; from &#x60;/alerts/rules&#x60; endpoint. If &#x60;alertsEnabled&#x60; is set to &#x60;true&#x60; and &#x60;alertRules&#x60; is not included on test creation or update, applicable user default alert rules will be used)
   * @return alertRules
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALERT_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAlertRules() {
    return alertRules;
  }


  @JsonProperty(JSON_PROPERTY_ALERT_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlertRules(List<String> alertRules) {
    this.alertRules = alertRules;
  }


   /**
   * User that created the test.
   * @return createdBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreatedBy() {
    return createdBy;
  }




   /**
   * UTC created date (ISO date-time format).
   * @return createdDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }




  public WebTransactionTestRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the test.
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * Indicates if the test is shared with the account group.
   * @return liveShare
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIVE_SHARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLiveShare() {
    return liveShare;
  }




   /**
   * User that modified the test.
   * @return modifiedBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModifiedBy() {
    return modifiedBy;
  }




   /**
   * UTC last modification date (ISO date-time format).
   * @return modifiedDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }




   /**
   * Indicates if the test is a saved event.
   * @return savedEvent
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAVED_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSavedEvent() {
    return savedEvent;
  }




   /**
   * Each test is assigned an unique ID; this is used to access test information and results from other endpoints.
   * @return testId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTestId() {
    return testId;
  }




  public WebTransactionTestRequest testName(String testName) {
    this.testName = testName;
    return this;
  }

   /**
   * The name of the test. Test name must be unique.
   * @return testName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTestName() {
    return testName;
  }


  @JsonProperty(JSON_PROPERTY_TEST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestName(String testName) {
    this.testName = testName;
  }


   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }




  public WebTransactionTestRequest links(TestLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestLinks getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(TestLinks links) {
    this.links = links;
  }


  public WebTransactionTestRequest labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public WebTransactionTestRequest addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Contains list of test label IDs (get &#x60;labelId&#x60; from &#x60;/labels&#x60; endpoint)
   * @return labels
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public WebTransactionTestRequest sharedWithAccounts(List<String> sharedWithAccounts) {
    this.sharedWithAccounts = sharedWithAccounts;
    return this;
  }

  public WebTransactionTestRequest addSharedWithAccountsItem(String sharedWithAccountsItem) {
    if (this.sharedWithAccounts == null) {
      this.sharedWithAccounts = new ArrayList<>();
    }
    this.sharedWithAccounts.add(sharedWithAccountsItem);
    return this;
  }

   /**
   * Contains list of account group IDs. Test is shared with the listed account groups (get &#x60;aid&#x60; from &#x60;/account-groups&#x60; endpoint)
   * @return sharedWithAccounts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARED_WITH_ACCOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSharedWithAccounts() {
    return sharedWithAccounts;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_WITH_ACCOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharedWithAccounts(List<String> sharedWithAccounts) {
    this.sharedWithAccounts = sharedWithAccounts;
  }


  public WebTransactionTestRequest authType(TestAuthType authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestAuthType getAuthType() {
    return authType;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthType(TestAuthType authType) {
    this.authType = authType;
  }


  public WebTransactionTestRequest agentInterfaces(AgentInterfaces agentInterfaces) {
    this.agentInterfaces = agentInterfaces;
    return this;
  }

   /**
   * Get agentInterfaces
   * @return agentInterfaces
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AGENT_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AgentInterfaces getAgentInterfaces() {
    return agentInterfaces;
  }


  @JsonProperty(JSON_PROPERTY_AGENT_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAgentInterfaces(AgentInterfaces agentInterfaces) {
    this.agentInterfaces = agentInterfaces;
  }


  public WebTransactionTestRequest bandwidthMeasurements(Boolean bandwidthMeasurements) {
    this.bandwidthMeasurements = bandwidthMeasurements;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; to enable bandwidth measurements, only applies to Enterprise agents assigned to the test.
   * @return bandwidthMeasurements
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBandwidthMeasurements() {
    return bandwidthMeasurements;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidthMeasurements(Boolean bandwidthMeasurements) {
    this.bandwidthMeasurements = bandwidthMeasurements;
  }


  public WebTransactionTestRequest clientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
    return this;
  }

   /**
   * String representation (containing newline characters) of client certificate, the private key must be placed first, then the certificate.
   * @return clientCertificate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientCertificate() {
    return clientCertificate;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
  }


  public WebTransactionTestRequest contentRegex(String contentRegex) {
    this.contentRegex = contentRegex;
    return this;
  }

   /**
   * Content regex, this field does not require escaping.
   * @return contentRegex
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContentRegex() {
    return contentRegex;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentRegex(String contentRegex) {
    this.contentRegex = contentRegex;
  }


  public WebTransactionTestRequest customHeaders(TestCustomHeaders customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

   /**
   * Get customHeaders
   * @return customHeaders
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestCustomHeaders getCustomHeaders() {
    return customHeaders;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomHeaders(TestCustomHeaders customHeaders) {
    this.customHeaders = customHeaders;
  }


  public WebTransactionTestRequest desiredStatusCode(String desiredStatusCode) {
    this.desiredStatusCode = desiredStatusCode;
    return this;
  }

   /**
   * Specify the HTTP status code value that indicates a successful response. The default value accepts any 2xx or 3xx status code.
   * @return desiredStatusCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESIRED_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDesiredStatusCode() {
    return desiredStatusCode;
  }


  @JsonProperty(JSON_PROPERTY_DESIRED_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDesiredStatusCode(String desiredStatusCode) {
    this.desiredStatusCode = desiredStatusCode;
  }


  public WebTransactionTestRequest downloadLimit(Integer downloadLimit) {
    this.downloadLimit = downloadLimit;
    return this;
  }

   /**
   * Specifies maximum number of bytes to download from the target object.
   * @return downloadLimit
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDownloadLimit() {
    return downloadLimit;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadLimit(Integer downloadLimit) {
    this.downloadLimit = downloadLimit;
  }


  public WebTransactionTestRequest dnsOverride(String dnsOverride) {
    this.dnsOverride = dnsOverride;
    return this;
  }

   /**
   * IP address to use for DNS override.
   * @return dnsOverride
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DNS_OVERRIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDnsOverride() {
    return dnsOverride;
  }


  @JsonProperty(JSON_PROPERTY_DNS_OVERRIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDnsOverride(String dnsOverride) {
    this.dnsOverride = dnsOverride;
  }


  public WebTransactionTestRequest httpTargetTime(Integer httpTargetTime) {
    this.httpTargetTime = httpTargetTime;
    return this;
  }

   /**
   * Target time for HTTP server completion, specified in milliseconds.
   * minimum: 100
   * maximum: 5000
   * @return httpTargetTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_TARGET_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHttpTargetTime() {
    return httpTargetTime;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_TARGET_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpTargetTime(Integer httpTargetTime) {
    this.httpTargetTime = httpTargetTime;
  }


  public WebTransactionTestRequest httpTimeLimit(Integer httpTimeLimit) {
    this.httpTimeLimit = httpTimeLimit;
    return this;
  }

   /**
   * HTTP time limit in seconds.
   * minimum: 5
   * maximum: 60
   * @return httpTimeLimit
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_TIME_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHttpTimeLimit() {
    return httpTimeLimit;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_TIME_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpTimeLimit(Integer httpTimeLimit) {
    this.httpTimeLimit = httpTimeLimit;
  }


  public WebTransactionTestRequest httpVersion(Integer httpVersion) {
    this.httpVersion = httpVersion;
    return this;
  }

   /**
   * HTTP protocol version. Set to &#39;2&#39; to prefer HTTP/2, or &#39;1&#39; to use only HTTP/1.1.
   * minimum: 1
   * maximum: 2
   * @return httpVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHttpVersion() {
    return httpVersion;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpVersion(Integer httpVersion) {
    this.httpVersion = httpVersion;
  }


  public WebTransactionTestRequest includeHeaders(Boolean includeHeaders) {
    this.includeHeaders = includeHeaders;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; to capture response headers for objects loaded by the test.
   * @return includeHeaders
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeHeaders() {
    return includeHeaders;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludeHeaders(Boolean includeHeaders) {
    this.includeHeaders = includeHeaders;
  }


  public WebTransactionTestRequest mtuMeasurements(Boolean mtuMeasurements) {
    this.mtuMeasurements = mtuMeasurements;
    return this;
  }

   /**
   * Set &#x60;true&#x60; to measure MTU sizes on network from agents to the target.
   * @return mtuMeasurements
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MTU_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMtuMeasurements() {
    return mtuMeasurements;
  }


  @JsonProperty(JSON_PROPERTY_MTU_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMtuMeasurements(Boolean mtuMeasurements) {
    this.mtuMeasurements = mtuMeasurements;
  }


  public WebTransactionTestRequest networkMeasurements(Boolean networkMeasurements) {
    this.networkMeasurements = networkMeasurements;
    return this;
  }

   /**
   * Enable or disable network measurements. Set to true to enable or false to disable network measurements.
   * @return networkMeasurements
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNetworkMeasurements() {
    return networkMeasurements;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkMeasurements(Boolean networkMeasurements) {
    this.networkMeasurements = networkMeasurements;
  }


  public WebTransactionTestRequest numPathTraces(Integer numPathTraces) {
    this.numPathTraces = numPathTraces;
    return this;
  }

   /**
   * Number of path traces executed by the agent.
   * minimum: 1
   * maximum: 10
   * @return numPathTraces
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_PATH_TRACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumPathTraces() {
    return numPathTraces;
  }


  @JsonProperty(JSON_PROPERTY_NUM_PATH_TRACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumPathTraces(Integer numPathTraces) {
    this.numPathTraces = numPathTraces;
  }


  public WebTransactionTestRequest oAuth(OAuth oAuth) {
    this.oAuth = oAuth;
    return this;
  }

   /**
   * Get oAuth
   * @return oAuth
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_O_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OAuth getoAuth() {
    return oAuth;
  }


  @JsonProperty(JSON_PROPERTY_O_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setoAuth(OAuth oAuth) {
    this.oAuth = oAuth;
  }


  public WebTransactionTestRequest password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for Basic/NTLM authentication.
   * @return password
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  public WebTransactionTestRequest pathTraceMode(TestPathTraceMode pathTraceMode) {
    this.pathTraceMode = pathTraceMode;
    return this;
  }

   /**
   * Get pathTraceMode
   * @return pathTraceMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH_TRACE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestPathTraceMode getPathTraceMode() {
    return pathTraceMode;
  }


  @JsonProperty(JSON_PROPERTY_PATH_TRACE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPathTraceMode(TestPathTraceMode pathTraceMode) {
    this.pathTraceMode = pathTraceMode;
  }


  public WebTransactionTestRequest probeMode(TestProbeMode probeMode) {
    this.probeMode = probeMode;
    return this;
  }

   /**
   * Get probeMode
   * @return probeMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROBE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestProbeMode getProbeMode() {
    return probeMode;
  }


  @JsonProperty(JSON_PROPERTY_PROBE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProbeMode(TestProbeMode probeMode) {
    this.probeMode = probeMode;
  }


  public WebTransactionTestRequest protocol(TestProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestProtocol getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(TestProtocol protocol) {
    this.protocol = protocol;
  }


   /**
   * Reflects the verbose SSL protocol version used by a test.
   * @return sslVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SSL_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSslVersion() {
    return sslVersion;
  }




  public WebTransactionTestRequest sslVersionId(TestSslVersionId sslVersionId) {
    this.sslVersionId = sslVersionId;
    return this;
  }

   /**
   * Get sslVersionId
   * @return sslVersionId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SSL_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestSslVersionId getSslVersionId() {
    return sslVersionId;
  }


  @JsonProperty(JSON_PROPERTY_SSL_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSslVersionId(TestSslVersionId sslVersionId) {
    this.sslVersionId = sslVersionId;
  }


  public WebTransactionTestRequest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Target for the test.
   * @return url
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  public WebTransactionTestRequest useNtlm(Boolean useNtlm) {
    this.useNtlm = useNtlm;
    return this;
  }

   /**
   * Set to true to use NTLM, false to use Basic Authentication. Requires username and password to be set.
   * @return useNtlm
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_NTLM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseNtlm() {
    return useNtlm;
  }


  @JsonProperty(JSON_PROPERTY_USE_NTLM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseNtlm(Boolean useNtlm) {
    this.useNtlm = useNtlm;
  }


  public WebTransactionTestRequest userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

   /**
   * User-agent string to be provided during the test.
   * @return userAgent
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserAgent() {
    return userAgent;
  }


  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public WebTransactionTestRequest username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username for Basic/NTLM authentication.
   * @return username
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }


  public WebTransactionTestRequest verifyCertificate(Boolean verifyCertificate) {
    this.verifyCertificate = verifyCertificate;
    return this;
  }

   /**
   * Ignore or acknowledge certificate errors. Set to false to ignore certificate errors.
   * @return verifyCertificate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERIFY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getVerifyCertificate() {
    return verifyCertificate;
  }


  @JsonProperty(JSON_PROPERTY_VERIFY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerifyCertificate(Boolean verifyCertificate) {
    this.verifyCertificate = verifyCertificate;
  }


  public WebTransactionTestRequest allowUnsafeLegacyRenegotiation(Boolean allowUnsafeLegacyRenegotiation) {
    this.allowUnsafeLegacyRenegotiation = allowUnsafeLegacyRenegotiation;
    return this;
  }

   /**
   * Allows TLS renegotiation with servers not supporting RFC 5746. Default Set to true to allow unsafe legacy renegotiation.
   * @return allowUnsafeLegacyRenegotiation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowUnsafeLegacyRenegotiation() {
    return allowUnsafeLegacyRenegotiation;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowUnsafeLegacyRenegotiation(Boolean allowUnsafeLegacyRenegotiation) {
    this.allowUnsafeLegacyRenegotiation = allowUnsafeLegacyRenegotiation;
  }


  public WebTransactionTestRequest followRedirects(Boolean followRedirects) {
    this.followRedirects = followRedirects;
    return this;
  }

   /**
   * To disable following HTTP/301 or HTTP/302 redirect directives, set this parameter to &#x60;false&#x60;.
   * @return followRedirects
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOLLOW_REDIRECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFollowRedirects() {
    return followRedirects;
  }


  @JsonProperty(JSON_PROPERTY_FOLLOW_REDIRECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFollowRedirects(Boolean followRedirects) {
    this.followRedirects = followRedirects;
  }


  public WebTransactionTestRequest fixedPacketRate(Integer fixedPacketRate) {
    this.fixedPacketRate = fixedPacketRate;
    return this;
  }

   /**
   * Sets packets rate sent to measure the network in packets per second.
   * minimum: 0
   * maximum: 100
   * @return fixedPacketRate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIXED_PACKET_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFixedPacketRate() {
    return fixedPacketRate;
  }


  @JsonProperty(JSON_PROPERTY_FIXED_PACKET_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixedPacketRate(Integer fixedPacketRate) {
    this.fixedPacketRate = fixedPacketRate;
  }


  public WebTransactionTestRequest overrideAgentProxy(Boolean overrideAgentProxy) {
    this.overrideAgentProxy = overrideAgentProxy;
    return this;
  }

   /**
   * Flag indicating if a proxy other than the default should be used. To override the default proxy for agents, set to &#x60;true&#x60; and specify a value for &#x60;overrideProxyId&#x60;.
   * @return overrideAgentProxy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERRIDE_AGENT_PROXY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOverrideAgentProxy() {
    return overrideAgentProxy;
  }


  @JsonProperty(JSON_PROPERTY_OVERRIDE_AGENT_PROXY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverrideAgentProxy(Boolean overrideAgentProxy) {
    this.overrideAgentProxy = overrideAgentProxy;
  }


  public WebTransactionTestRequest overrideProxyId(String overrideProxyId) {
    this.overrideProxyId = overrideProxyId;
    return this;
  }

   /**
   * ID of the proxy to be used if the default proxy is overridden.
   * @return overrideProxyId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERRIDE_PROXY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOverrideProxyId() {
    return overrideProxyId;
  }


  @JsonProperty(JSON_PROPERTY_OVERRIDE_PROXY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverrideProxyId(String overrideProxyId) {
    this.overrideProxyId = overrideProxyId;
  }


  public WebTransactionTestRequest collectProxyNetworkData(Boolean collectProxyNetworkData) {
    this.collectProxyNetworkData = collectProxyNetworkData;
    return this;
  }

   /**
   * Indicates whether network data to the proxy should be collected.
   * @return collectProxyNetworkData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLLECT_PROXY_NETWORK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCollectProxyNetworkData() {
    return collectProxyNetworkData;
  }


  @JsonProperty(JSON_PROPERTY_COLLECT_PROXY_NETWORK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCollectProxyNetworkData(Boolean collectProxyNetworkData) {
    this.collectProxyNetworkData = collectProxyNetworkData;
  }


  public WebTransactionTestRequest emulatedDeviceId(String emulatedDeviceId) {
    this.emulatedDeviceId = emulatedDeviceId;
    return this;
  }

   /**
   * ID of the emulated device, if specified when the test was created.
   * @return emulatedDeviceId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMULATED_DEVICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmulatedDeviceId() {
    return emulatedDeviceId;
  }


  @JsonProperty(JSON_PROPERTY_EMULATED_DEVICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmulatedDeviceId(String emulatedDeviceId) {
    this.emulatedDeviceId = emulatedDeviceId;
  }


  public WebTransactionTestRequest targetTime(Integer targetTime) {
    this.targetTime = targetTime;
    return this;
  }

   /**
   * Target completion time. The default is 50% of the specified time limit in seconds. (Set to 0 to use the default behavior).
   * minimum: 0
   * maximum: 60
   * @return targetTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTargetTime() {
    return targetTime;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetTime(Integer targetTime) {
    this.targetTime = targetTime;
  }


  public WebTransactionTestRequest timeLimit(Integer timeLimit) {
    this.timeLimit = timeLimit;
    return this;
  }

   /**
   * Time limit for transaction in seconds.
   * minimum: 5
   * maximum: 180
   * @return timeLimit
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTimeLimit() {
    return timeLimit;
  }


  @JsonProperty(JSON_PROPERTY_TIME_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeLimit(Integer timeLimit) {
    this.timeLimit = timeLimit;
  }


  public WebTransactionTestRequest transactionScript(String transactionScript) {
    this.transactionScript = transactionScript;
    return this;
  }

   /**
   * JavaScript of a web transaction test. Quotes must be escaped (precede \&quot; characters with \\ ).
   * @return transactionScript
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSACTION_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionScript() {
    return transactionScript;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionScript(String transactionScript) {
    this.transactionScript = transactionScript;
  }


  public WebTransactionTestRequest blockDomains(String blockDomains) {
    this.blockDomains = blockDomains;
    return this;
  }

   /**
   * Domains or full object URLs to be excluded from metrics and waterfall data for transaction tests.
   * @return blockDomains
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLOCK_DOMAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBlockDomains() {
    return blockDomains;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_DOMAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlockDomains(String blockDomains) {
    this.blockDomains = blockDomains;
  }


  public WebTransactionTestRequest disableScreenshot(Boolean disableScreenshot) {
    this.disableScreenshot = disableScreenshot;
    return this;
  }

   /**
   * Enables or disables screenshots on error. Set true to not capture
   * @return disableScreenshot
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISABLE_SCREENSHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisableScreenshot() {
    return disableScreenshot;
  }


  @JsonProperty(JSON_PROPERTY_DISABLE_SCREENSHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableScreenshot(Boolean disableScreenshot) {
    this.disableScreenshot = disableScreenshot;
  }


  public WebTransactionTestRequest allowMicAndCamera(Boolean allowMicAndCamera) {
    this.allowMicAndCamera = allowMicAndCamera;
    return this;
  }

   /**
   * Set true allow the use of a fake mic and camera in the browser.
   * @return allowMicAndCamera
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_MIC_AND_CAMERA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowMicAndCamera() {
    return allowMicAndCamera;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_MIC_AND_CAMERA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowMicAndCamera(Boolean allowMicAndCamera) {
    this.allowMicAndCamera = allowMicAndCamera;
  }


  public WebTransactionTestRequest allowGeolocation(Boolean allowGeolocation) {
    this.allowGeolocation = allowGeolocation;
    return this;
  }

   /**
   * Set true to use the agent’s geolocation by the web page.
   * @return allowGeolocation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_GEOLOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowGeolocation() {
    return allowGeolocation;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_GEOLOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowGeolocation(Boolean allowGeolocation) {
    this.allowGeolocation = allowGeolocation;
  }


  public WebTransactionTestRequest browserLanguage(String browserLanguage) {
    this.browserLanguage = browserLanguage;
    return this;
  }

   /**
   * Set one of the available browser language that you want to use to configure the browser.
   * @return browserLanguage
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BROWSER_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBrowserLanguage() {
    return browserLanguage;
  }


  @JsonProperty(JSON_PROPERTY_BROWSER_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrowserLanguage(String browserLanguage) {
    this.browserLanguage = browserLanguage;
  }


  public WebTransactionTestRequest pageLoadingStrategy(TestPageLoadingStrategy pageLoadingStrategy) {
    this.pageLoadingStrategy = pageLoadingStrategy;
    return this;
  }

   /**
   * Get pageLoadingStrategy
   * @return pageLoadingStrategy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGE_LOADING_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestPageLoadingStrategy getPageLoadingStrategy() {
    return pageLoadingStrategy;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_LOADING_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPageLoadingStrategy(TestPageLoadingStrategy pageLoadingStrategy) {
    this.pageLoadingStrategy = pageLoadingStrategy;
  }


  public WebTransactionTestRequest credentials(List<String> credentials) {
    this.credentials = credentials;
    return this;
  }

  public WebTransactionTestRequest addCredentialsItem(String credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

   /**
   * Contains a list of credential IDs (get &#x60;credentialId&#x60; from &#x60;/credentials&#x60; endpoint).
   * @return credentials
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDENTIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCredentials() {
    return credentials;
  }


  @JsonProperty(JSON_PROPERTY_CREDENTIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredentials(List<String> credentials) {
    this.credentials = credentials;
  }


  public WebTransactionTestRequest bgpMeasurements(Boolean bgpMeasurements) {
    this.bgpMeasurements = bgpMeasurements;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; to enable bgp measurements.
   * @return bgpMeasurements
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BGP_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBgpMeasurements() {
    return bgpMeasurements;
  }


  @JsonProperty(JSON_PROPERTY_BGP_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBgpMeasurements(Boolean bgpMeasurements) {
    this.bgpMeasurements = bgpMeasurements;
  }


  public WebTransactionTestRequest usePublicBgp(Boolean usePublicBgp) {
    this.usePublicBgp = usePublicBgp;
    return this;
  }

   /**
   * Indicate if all available public BGP monitors should be used, when ommited defaults to &#x60;bgpMeasurements&#x60; value.
   * @return usePublicBgp
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_PUBLIC_BGP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUsePublicBgp() {
    return usePublicBgp;
  }


  @JsonProperty(JSON_PROPERTY_USE_PUBLIC_BGP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsePublicBgp(Boolean usePublicBgp) {
    this.usePublicBgp = usePublicBgp;
  }


  public WebTransactionTestRequest monitors(List<String> monitors) {
    this.monitors = monitors;
    return this;
  }

  public WebTransactionTestRequest addMonitorsItem(String monitorsItem) {
    if (this.monitors == null) {
      this.monitors = new ArrayList<>();
    }
    this.monitors.add(monitorsItem);
    return this;
  }

   /**
   * Contains list of BGP monitor IDs (get &#x60;monitorId&#x60; from &#x60;/monitors&#x60; endpoint)
   * @return monitors
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MONITORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMonitors() {
    return monitors;
  }


  @JsonProperty(JSON_PROPERTY_MONITORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonitors(List<String> monitors) {
    this.monitors = monitors;
  }


  public WebTransactionTestRequest subinterval(TestSubInterval subinterval) {
    this.subinterval = subinterval;
    return this;
  }

   /**
   * Get subinterval
   * @return subinterval
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBINTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestSubInterval getSubinterval() {
    return subinterval;
  }


  @JsonProperty(JSON_PROPERTY_SUBINTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubinterval(TestSubInterval subinterval) {
    this.subinterval = subinterval;
  }


  public WebTransactionTestRequest agents(List<TestAgentRequest> agents) {
    this.agents = agents;
    return this;
  }

  public WebTransactionTestRequest addAgentsItem(TestAgentRequest agentsItem) {
    if (this.agents == null) {
      this.agents = new ArrayList<>();
    }
    this.agents.add(agentsItem);
    return this;
  }

   /**
   * Contains list of Agent IDs (get &#x60;agentId&#x60; from &#x60;/agents&#x60; endpoint).
   * @return agents
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AGENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TestAgentRequest> getAgents() {
    return agents;
  }


  @JsonProperty(JSON_PROPERTY_AGENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAgents(List<TestAgentRequest> agents) {
    this.agents = agents;
  }


  /**
   * Return true if this WebTransactionTestRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebTransactionTestRequest webTransactionTestRequest = (WebTransactionTestRequest) o;
    return Objects.equals(this.interval, webTransactionTestRequest.interval) &&
        Objects.equals(this.alertsEnabled, webTransactionTestRequest.alertsEnabled) &&
        Objects.equals(this.enabled, webTransactionTestRequest.enabled) &&
        Objects.equals(this.alertRules, webTransactionTestRequest.alertRules) &&
        Objects.equals(this.createdBy, webTransactionTestRequest.createdBy) &&
        Objects.equals(this.createdDate, webTransactionTestRequest.createdDate) &&
        Objects.equals(this.description, webTransactionTestRequest.description) &&
        Objects.equals(this.liveShare, webTransactionTestRequest.liveShare) &&
        Objects.equals(this.modifiedBy, webTransactionTestRequest.modifiedBy) &&
        Objects.equals(this.modifiedDate, webTransactionTestRequest.modifiedDate) &&
        Objects.equals(this.savedEvent, webTransactionTestRequest.savedEvent) &&
        Objects.equals(this.testId, webTransactionTestRequest.testId) &&
        Objects.equals(this.testName, webTransactionTestRequest.testName) &&
        Objects.equals(this.type, webTransactionTestRequest.type) &&
        Objects.equals(this.links, webTransactionTestRequest.links) &&
        Objects.equals(this.labels, webTransactionTestRequest.labels) &&
        Objects.equals(this.sharedWithAccounts, webTransactionTestRequest.sharedWithAccounts) &&
        Objects.equals(this.authType, webTransactionTestRequest.authType) &&
        Objects.equals(this.agentInterfaces, webTransactionTestRequest.agentInterfaces) &&
        Objects.equals(this.bandwidthMeasurements, webTransactionTestRequest.bandwidthMeasurements) &&
        Objects.equals(this.clientCertificate, webTransactionTestRequest.clientCertificate) &&
        Objects.equals(this.contentRegex, webTransactionTestRequest.contentRegex) &&
        Objects.equals(this.customHeaders, webTransactionTestRequest.customHeaders) &&
        Objects.equals(this.desiredStatusCode, webTransactionTestRequest.desiredStatusCode) &&
        Objects.equals(this.downloadLimit, webTransactionTestRequest.downloadLimit) &&
        Objects.equals(this.dnsOverride, webTransactionTestRequest.dnsOverride) &&
        Objects.equals(this.httpTargetTime, webTransactionTestRequest.httpTargetTime) &&
        Objects.equals(this.httpTimeLimit, webTransactionTestRequest.httpTimeLimit) &&
        Objects.equals(this.httpVersion, webTransactionTestRequest.httpVersion) &&
        Objects.equals(this.includeHeaders, webTransactionTestRequest.includeHeaders) &&
        Objects.equals(this.mtuMeasurements, webTransactionTestRequest.mtuMeasurements) &&
        Objects.equals(this.networkMeasurements, webTransactionTestRequest.networkMeasurements) &&
        Objects.equals(this.numPathTraces, webTransactionTestRequest.numPathTraces) &&
        Objects.equals(this.oAuth, webTransactionTestRequest.oAuth) &&
        Objects.equals(this.password, webTransactionTestRequest.password) &&
        Objects.equals(this.pathTraceMode, webTransactionTestRequest.pathTraceMode) &&
        Objects.equals(this.probeMode, webTransactionTestRequest.probeMode) &&
        Objects.equals(this.protocol, webTransactionTestRequest.protocol) &&
        Objects.equals(this.sslVersion, webTransactionTestRequest.sslVersion) &&
        Objects.equals(this.sslVersionId, webTransactionTestRequest.sslVersionId) &&
        Objects.equals(this.url, webTransactionTestRequest.url) &&
        Objects.equals(this.useNtlm, webTransactionTestRequest.useNtlm) &&
        Objects.equals(this.userAgent, webTransactionTestRequest.userAgent) &&
        Objects.equals(this.username, webTransactionTestRequest.username) &&
        Objects.equals(this.verifyCertificate, webTransactionTestRequest.verifyCertificate) &&
        Objects.equals(this.allowUnsafeLegacyRenegotiation, webTransactionTestRequest.allowUnsafeLegacyRenegotiation) &&
        Objects.equals(this.followRedirects, webTransactionTestRequest.followRedirects) &&
        Objects.equals(this.fixedPacketRate, webTransactionTestRequest.fixedPacketRate) &&
        Objects.equals(this.overrideAgentProxy, webTransactionTestRequest.overrideAgentProxy) &&
        Objects.equals(this.overrideProxyId, webTransactionTestRequest.overrideProxyId) &&
        Objects.equals(this.collectProxyNetworkData, webTransactionTestRequest.collectProxyNetworkData) &&
        Objects.equals(this.emulatedDeviceId, webTransactionTestRequest.emulatedDeviceId) &&
        Objects.equals(this.targetTime, webTransactionTestRequest.targetTime) &&
        Objects.equals(this.timeLimit, webTransactionTestRequest.timeLimit) &&
        Objects.equals(this.transactionScript, webTransactionTestRequest.transactionScript) &&
        Objects.equals(this.blockDomains, webTransactionTestRequest.blockDomains) &&
        Objects.equals(this.disableScreenshot, webTransactionTestRequest.disableScreenshot) &&
        Objects.equals(this.allowMicAndCamera, webTransactionTestRequest.allowMicAndCamera) &&
        Objects.equals(this.allowGeolocation, webTransactionTestRequest.allowGeolocation) &&
        Objects.equals(this.browserLanguage, webTransactionTestRequest.browserLanguage) &&
        Objects.equals(this.pageLoadingStrategy, webTransactionTestRequest.pageLoadingStrategy) &&
        Objects.equals(this.credentials, webTransactionTestRequest.credentials) &&
        Objects.equals(this.bgpMeasurements, webTransactionTestRequest.bgpMeasurements) &&
        Objects.equals(this.usePublicBgp, webTransactionTestRequest.usePublicBgp) &&
        Objects.equals(this.monitors, webTransactionTestRequest.monitors) &&
        Objects.equals(this.subinterval, webTransactionTestRequest.subinterval) &&
        Objects.equals(this.agents, webTransactionTestRequest.agents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interval, alertsEnabled, enabled, alertRules, createdBy, createdDate, description, liveShare, modifiedBy, modifiedDate, savedEvent, testId, testName, type, links, labels, sharedWithAccounts, authType, agentInterfaces, bandwidthMeasurements, clientCertificate, contentRegex, customHeaders, desiredStatusCode, downloadLimit, dnsOverride, httpTargetTime, httpTimeLimit, httpVersion, includeHeaders, mtuMeasurements, networkMeasurements, numPathTraces, oAuth, password, pathTraceMode, probeMode, protocol, sslVersion, sslVersionId, url, useNtlm, userAgent, username, verifyCertificate, allowUnsafeLegacyRenegotiation, followRedirects, fixedPacketRate, overrideAgentProxy, overrideProxyId, collectProxyNetworkData, emulatedDeviceId, targetTime, timeLimit, transactionScript, blockDomains, disableScreenshot, allowMicAndCamera, allowGeolocation, browserLanguage, pageLoadingStrategy, credentials, bgpMeasurements, usePublicBgp, monitors, subinterval, agents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebTransactionTestRequest {\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    alertsEnabled: ").append(toIndentedString(alertsEnabled)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    alertRules: ").append(toIndentedString(alertRules)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    liveShare: ").append(toIndentedString(liveShare)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    savedEvent: ").append(toIndentedString(savedEvent)).append("\n");
    sb.append("    testId: ").append(toIndentedString(testId)).append("\n");
    sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    sharedWithAccounts: ").append(toIndentedString(sharedWithAccounts)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    agentInterfaces: ").append(toIndentedString(agentInterfaces)).append("\n");
    sb.append("    bandwidthMeasurements: ").append(toIndentedString(bandwidthMeasurements)).append("\n");
    sb.append("    clientCertificate: ").append(toIndentedString(clientCertificate)).append("\n");
    sb.append("    contentRegex: ").append(toIndentedString(contentRegex)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    desiredStatusCode: ").append(toIndentedString(desiredStatusCode)).append("\n");
    sb.append("    downloadLimit: ").append(toIndentedString(downloadLimit)).append("\n");
    sb.append("    dnsOverride: ").append(toIndentedString(dnsOverride)).append("\n");
    sb.append("    httpTargetTime: ").append(toIndentedString(httpTargetTime)).append("\n");
    sb.append("    httpTimeLimit: ").append(toIndentedString(httpTimeLimit)).append("\n");
    sb.append("    httpVersion: ").append(toIndentedString(httpVersion)).append("\n");
    sb.append("    includeHeaders: ").append(toIndentedString(includeHeaders)).append("\n");
    sb.append("    mtuMeasurements: ").append(toIndentedString(mtuMeasurements)).append("\n");
    sb.append("    networkMeasurements: ").append(toIndentedString(networkMeasurements)).append("\n");
    sb.append("    numPathTraces: ").append(toIndentedString(numPathTraces)).append("\n");
    sb.append("    oAuth: ").append(toIndentedString(oAuth)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pathTraceMode: ").append(toIndentedString(pathTraceMode)).append("\n");
    sb.append("    probeMode: ").append(toIndentedString(probeMode)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sslVersion: ").append(toIndentedString(sslVersion)).append("\n");
    sb.append("    sslVersionId: ").append(toIndentedString(sslVersionId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useNtlm: ").append(toIndentedString(useNtlm)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    verifyCertificate: ").append(toIndentedString(verifyCertificate)).append("\n");
    sb.append("    allowUnsafeLegacyRenegotiation: ").append(toIndentedString(allowUnsafeLegacyRenegotiation)).append("\n");
    sb.append("    followRedirects: ").append(toIndentedString(followRedirects)).append("\n");
    sb.append("    fixedPacketRate: ").append(toIndentedString(fixedPacketRate)).append("\n");
    sb.append("    overrideAgentProxy: ").append(toIndentedString(overrideAgentProxy)).append("\n");
    sb.append("    overrideProxyId: ").append(toIndentedString(overrideProxyId)).append("\n");
    sb.append("    collectProxyNetworkData: ").append(toIndentedString(collectProxyNetworkData)).append("\n");
    sb.append("    emulatedDeviceId: ").append(toIndentedString(emulatedDeviceId)).append("\n");
    sb.append("    targetTime: ").append(toIndentedString(targetTime)).append("\n");
    sb.append("    timeLimit: ").append(toIndentedString(timeLimit)).append("\n");
    sb.append("    transactionScript: ").append(toIndentedString(transactionScript)).append("\n");
    sb.append("    blockDomains: ").append(toIndentedString(blockDomains)).append("\n");
    sb.append("    disableScreenshot: ").append(toIndentedString(disableScreenshot)).append("\n");
    sb.append("    allowMicAndCamera: ").append(toIndentedString(allowMicAndCamera)).append("\n");
    sb.append("    allowGeolocation: ").append(toIndentedString(allowGeolocation)).append("\n");
    sb.append("    browserLanguage: ").append(toIndentedString(browserLanguage)).append("\n");
    sb.append("    pageLoadingStrategy: ").append(toIndentedString(pageLoadingStrategy)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    bgpMeasurements: ").append(toIndentedString(bgpMeasurements)).append("\n");
    sb.append("    usePublicBgp: ").append(toIndentedString(usePublicBgp)).append("\n");
    sb.append("    monitors: ").append(toIndentedString(monitors)).append("\n");
    sb.append("    subinterval: ").append(toIndentedString(subinterval)).append("\n");
    sb.append("    agents: ").append(toIndentedString(agents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

