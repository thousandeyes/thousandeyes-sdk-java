/*
 * Tests API
 * This API allows you to list, create, edit, and delete Network and Application Synthetics tests. 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.tests;

import com.thousandeyes.sdk.tests.model.Error;
import com.thousandeyes.sdk.tests.model.InterfaceGroup;
import com.thousandeyes.sdk.tests.model.InterfaceGroups;
import java.net.URI;
import com.thousandeyes.sdk.tests.model.UnauthorizedError;
import com.thousandeyes.sdk.tests.model.ValidationError;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.common.ContentTypes.AUTHORIZATION;
import static com.github.tomakehurst.wiremock.common.ContentTypes.CONTENT_TYPE;
import static com.thousandeyes.sdk.serialization.JSON.getDefault;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
import com.github.tomakehurst.wiremock.junit5.WireMockTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.NativeApiClient;


/**
 * Request and Response model deserialization tests for PathVisualizationInterfaceGroupsApi
 */
@WireMockTest
public class PathVisualizationInterfaceGroupsApiTest {
    private static final String TOKEN = "valid-token";
    private static final String BEARER_TOKEN = "Bearer %s".formatted(TOKEN);
    private static PathVisualizationInterfaceGroupsApi api;
    private final ObjectMapper mapper = getDefault()
            .getMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

    @BeforeAll
    public static void setup(WireMockRuntimeInfo wireMockRuntimeInfo) {
        ApiClient client = NativeApiClient.builder()
                                .baseUri(wireMockRuntimeInfo.getHttpBaseUrl())
                                .bearerToken(TOKEN)
                                .build();
        api = new PathVisualizationInterfaceGroupsApi(client);
    }
    
    /**
     * Create interface group for path visualization
     * <p>
     * Creates a new path visualization interface group.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void createPathVisInterfaceGroupsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "groupName" : "PathVis Interface Group",
                  "rdnsRegexes" : [ "aggr403b-1.iad3.rackspace.net", "aggr403c-1.iad3.rackspace.net" ],
                  "groupId" : "281474976710706",
                  "ipAddresses" : [ "1.1.1.1", "8.8.8.8" ],
                  "aid" : "1234"
                }
                                 """;
        var requestBodyContentType = "application/json";
        InterfaceGroup mappedRequest = 
                mapper.readValue(requestBodyJson, InterfaceGroup.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "groupName" : "PathVis Interface Group",
                  "rdnsRegexes" : [ "aggr403b-1.iad3.rackspace.net", "aggr403c-1.iad3.rackspace.net" ],
                  "groupId" : "281474976710706",
                  "ipAddresses" : [ "1.1.1.1", "8.8.8.8" ],
                  "aid" : "1234"
                }
                                  """;
        var statusCode = 201;
        var responseContentType = "application/json";
        InterfaceGroup mappedResponse = 
                mapper.readValue(responseBodyJson, InterfaceGroup.class);
        assertNotNull(mappedResponse);

        var path = "/network/path-vis/interface-groups";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.createPathVisInterfaceGroups(mappedRequest, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Delete interface group
     * <p>
     * Deletes a path visualization interface group.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void deletePathVisInterfaceGroupRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String interfaceGroupId = "281474976710706";


        var statusCode = 204;

        var path = "/network/path-vis/interface-groups/{interfaceGroupId}";
        stubFor(delete(urlPathTemplate(path))
                        .withPathParam("interfaceGroupId", equalTo(URLEncoder.encode(interfaceGroupId, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withStatus(statusCode)));

        var apiResponse = api.deletePathVisInterfaceGroupWithHttpInfo(interfaceGroupId, null);
        assertEquals(statusCode, apiResponse.getStatusCode());
    }
    
    /**
     * List interface groups for path visualization
     * <p>
     * Returns a list of all path visualization interface groups. For more information about interface groups, see https://docs.thousandeyes.com/product-documentation/end-user-monitoring/viewing-data/endpoint-agent-views-reference#grouping.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getPathVisInterfaceGroupsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {


        var responseBodyJson = """
                {
                  "pathVisInterfaceGroups" : [ {
                    "groupName" : "PathVis Interface Group",
                    "rdnsRegexes" : [ "aggr403b-1.iad3.rackspace.net", "aggr403c-1.iad3.rackspace.net" ],
                    "groupId" : "281474976710706",
                    "ipAddresses" : [ "1.1.1.1", "8.8.8.8" ],
                    "aid" : "1234"
                  }, {
                    "groupName" : "PathVis Interface Group",
                    "rdnsRegexes" : [ "aggr403b-1.iad3.rackspace.net", "aggr403c-1.iad3.rackspace.net" ],
                    "groupId" : "281474976710706",
                    "ipAddresses" : [ "1.1.1.1", "8.8.8.8" ],
                    "aid" : "1234"
                  } ],
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  }
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        InterfaceGroups mappedResponse = 
                mapper.readValue(responseBodyJson, InterfaceGroups.class);
        assertNotNull(mappedResponse);

        var path = "/network/path-vis/interface-groups";
        stubFor(get(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getPathVisInterfaceGroups(null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Update interface group
     * <p>
     * Updates a path visualization interface group..
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void updatePathVisInterfaceGroupRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String interfaceGroupId = "281474976710706";

        var requestBodyJson = """
                {
                  "groupName" : "PathVis Interface Group",
                  "rdnsRegexes" : [ "aggr403b-1.iad3.rackspace.net", "aggr403c-1.iad3.rackspace.net" ],
                  "groupId" : "281474976710706",
                  "ipAddresses" : [ "1.1.1.1", "8.8.8.8" ],
                  "aid" : "1234"
                }
                                 """;
        var requestBodyContentType = "application/json";
        InterfaceGroup mappedRequest = 
                mapper.readValue(requestBodyJson, InterfaceGroup.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "groupName" : "PathVis Interface Group",
                  "rdnsRegexes" : [ "aggr403b-1.iad3.rackspace.net", "aggr403c-1.iad3.rackspace.net" ],
                  "groupId" : "281474976710706",
                  "ipAddresses" : [ "1.1.1.1", "8.8.8.8" ],
                  "aid" : "1234"
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        InterfaceGroup mappedResponse = 
                mapper.readValue(responseBodyJson, InterfaceGroup.class);
        assertNotNull(mappedResponse);

        var path = "/network/path-vis/interface-groups/{interfaceGroupId}";
        stubFor(put(urlPathTemplate(path))
                        .withPathParam("interfaceGroupId", equalTo(URLEncoder.encode(interfaceGroupId, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.updatePathVisInterfaceGroup(interfaceGroupId, mappedRequest, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
}
