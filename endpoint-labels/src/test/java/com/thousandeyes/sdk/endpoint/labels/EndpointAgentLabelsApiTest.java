/*
 * Endpoint Agent Labels API
 * Manage labels applied to endpoint agents using this API. 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.endpoint.labels;

import com.thousandeyes.sdk.endpoint.labels.model.Error;
import com.thousandeyes.sdk.endpoint.labels.model.ExpandLabelOptions;
import com.thousandeyes.sdk.endpoint.labels.model.Label;
import com.thousandeyes.sdk.endpoint.labels.model.LabelRequest;
import com.thousandeyes.sdk.endpoint.labels.model.LabelResponse;
import com.thousandeyes.sdk.endpoint.labels.model.Labels;
import java.net.URI;
import com.thousandeyes.sdk.endpoint.labels.model.UnauthorizedError;
import com.thousandeyes.sdk.endpoint.labels.model.ValidationError;
import com.thousandeyes.sdk.endpoint.labels.model.LabelResponse;
import com.thousandeyes.sdk.pagination.Paginator;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.common.ContentTypes.AUTHORIZATION;
import static com.github.tomakehurst.wiremock.common.ContentTypes.CONTENT_TYPE;
import static com.thousandeyes.sdk.serialization.JSON.getDefault;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
import com.github.tomakehurst.wiremock.junit5.WireMockTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.NativeApiClient;


/**
 * Request and Response model deserialization tests for EndpointAgentLabelsApi
 */
@WireMockTest
public class EndpointAgentLabelsApiTest {
    private static final String TOKEN = "valid-token";
    private static final String BEARER_TOKEN = "Bearer %s".formatted(TOKEN);
    private static EndpointAgentLabelsApi api;
    private final ObjectMapper mapper = getDefault()
            .getMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

    @BeforeAll
    public static void setup(WireMockRuntimeInfo wireMockRuntimeInfo) {
        ApiClient client = NativeApiClient.builder()
                                .baseUri(wireMockRuntimeInfo.getHttpBaseUrl())
                                .bearerToken(TOKEN)
                                .build();
        api = new EndpointAgentLabelsApi(client);
    }
    
    /**
     * Create label
     * <p>
     * Creates a new label.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void createEndpointLabelRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "color" : "#ff3333",
                  "matchType" : "and",
                  "name" : "Head office meeting rooms",
                  "id" : "abc-123-def",
                  "filters" : [ {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  }, {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  } ]
                }
                                 """;
        var requestBodyContentType = "application/json";
        LabelRequest mappedRequest = 
                mapper.readValue(requestBodyJson, LabelRequest.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "color" : "#ff3333",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "matchType" : "and",
                  "name" : "Head office meeting rooms",
                  "id" : "abc-123-def",
                  "filters" : [ {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  }, {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  } ]
                }
                                  """;
        var statusCode = 201;
        var responseContentType = "application/json";
        LabelResponse mappedResponse = 
                mapper.readValue(responseBodyJson, LabelResponse.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/labels";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.createEndpointLabel(null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Delete label
     * <p>
     * Deletes the label from your account. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void deleteEndpointLabelRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "abc-123-def";


        var statusCode = 204;

        var path = "/endpoint/labels/{id}";
        stubFor(delete(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withStatus(statusCode)));

        var apiResponse = api.deleteEndpointLabelWithHttpInfo(id, null);
        assertEquals(statusCode, apiResponse.getStatusCode());
    }
    
    /**
     * Retrieve label
     * <p>
     * Returns a single label using its ID.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getEndpointLabelRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "abc-123-def";


        var responseBodyJson = """
                {
                  "color" : "#ff3333",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "matchType" : "and",
                  "name" : "Head office meeting rooms",
                  "id" : "abc-123-def",
                  "filters" : [ {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  }, {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        LabelResponse mappedResponse = 
                mapper.readValue(responseBodyJson, LabelResponse.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/labels/{id}";
        stubFor(get(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getEndpointLabel(id, null, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * List labels
     * <p>
     * Returns a list of labels.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getEndpointLabelsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {


        var responseBodyJson = """
                {
                  "_links" : {
                    "next" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    },
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "labels" : [ {
                    "color" : "#ff3333",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "matchType" : "and",
                    "name" : "Head office meeting rooms",
                    "id" : "abc-123-def",
                    "filters" : [ {
                      "mode" : "in",
                      "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                      "key" : "vpn-client-network"
                    }, {
                      "mode" : "in",
                      "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                      "key" : "vpn-client-network"
                    } ]
                  }, {
                    "color" : "#ff3333",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "matchType" : "and",
                    "name" : "Head office meeting rooms",
                    "id" : "abc-123-def",
                    "filters" : [ {
                      "mode" : "in",
                      "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                      "key" : "vpn-client-network"
                    }, {
                      "mode" : "in",
                      "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                      "key" : "vpn-client-network"
                    } ]
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        Labels mappedResponse = 
                mapper.readValue(responseBodyJson, Labels.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/labels";
        stubFor(get(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getEndpointLabels(null, null, null, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Update label
     * <p>
     * Updates a label using its ID.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void updateEndpointLabelRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "abc-123-def";

        var requestBodyJson = """
                {
                  "color" : "#ff3333",
                  "matchType" : "and",
                  "name" : "Head office meeting rooms",
                  "id" : "abc-123-def",
                  "filters" : [ {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  }, {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  } ]
                }
                                 """;
        var requestBodyContentType = "application/json";
        Label mappedRequest = 
                mapper.readValue(requestBodyJson, Label.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "color" : "#ff3333",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "matchType" : "and",
                  "name" : "Head office meeting rooms",
                  "id" : "abc-123-def",
                  "filters" : [ {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  }, {
                    "mode" : "in",
                    "values" : [ "10.1.1.0/24", "192.168.1.0/24" ],
                    "key" : "vpn-client-network"
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        LabelResponse mappedResponse = 
                mapper.readValue(responseBodyJson, LabelResponse.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/labels/{id}";
        stubFor(patch(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.updateEndpointLabel(id, null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
}
