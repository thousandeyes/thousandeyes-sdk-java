/*
 * Endpoint Agents API
 * Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.endpoint.agents;

import com.thousandeyes.sdk.endpoint.agents.model.AgentSearchRequest;
import com.thousandeyes.sdk.endpoint.agents.model.ConnectionString;
import com.thousandeyes.sdk.endpoint.agents.model.EndpointAgent;
import com.thousandeyes.sdk.endpoint.agents.model.EndpointAgentUpdate;
import com.thousandeyes.sdk.endpoint.agents.model.Error;
import com.thousandeyes.sdk.endpoint.agents.model.ExpandEndpointAgentOptions;
import com.thousandeyes.sdk.endpoint.agents.model.FilterEndpointAgentsResponse;
import com.thousandeyes.sdk.endpoint.agents.model.ListEndpointAgentsResponse;
import java.util.UUID;
import com.thousandeyes.sdk.endpoint.agents.model.UnauthorizedError;
import com.thousandeyes.sdk.endpoint.agents.model.ValidationError;
import com.thousandeyes.sdk.endpoint.agents.model.EndpointAgent;
import com.thousandeyes.sdk.pagination.Paginator;
import com.thousandeyes.sdk.endpoint.agents.model.EndpointAgent;
import com.thousandeyes.sdk.pagination.Paginator;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.common.ContentTypes.AUTHORIZATION;
import static com.github.tomakehurst.wiremock.common.ContentTypes.CONTENT_TYPE;
import static com.thousandeyes.sdk.serialization.JSON.getDefault;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
import com.github.tomakehurst.wiremock.junit5.WireMockTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.NativeApiClient;


/**
 * Request and Response model deserialization tests for EndpointAgentsApi
 */
@WireMockTest
public class EndpointAgentsApiTest {
    private static final String TOKEN = "valid-token";
    private static final String BEARER_TOKEN = "Bearer %s".formatted(TOKEN);
    private static EndpointAgentsApi api;
    private final ObjectMapper mapper = getDefault()
            .getMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

    @BeforeAll
    public static void setup(WireMockRuntimeInfo wireMockRuntimeInfo) {
        ApiClient client = NativeApiClient.builder()
                                .baseUri(wireMockRuntimeInfo.getHttpBaseUrl())
                                .bearerToken(TOKEN)
                                .build();
        api = new EndpointAgentsApi(client);
    }
    
    /**
     * Delete endpoint agent
     * <p>
     * Deletes the agent with the specified &#x60;agent_id&#x60;. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void deleteEndpointAgentRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        UUID agentId = UUID.fromString("861b7557-cd57-4bbb-b648-00bddf88ef49");


        var statusCode = 204;

        var path = "/endpoint/agents/{agentId}";
        stubFor(delete(urlPathTemplate(path))
                        .withPathParam("agentId", equalTo(URLEncoder.encode(agentId.toString(), StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withStatus(statusCode)));

        var apiResponse = api.deleteEndpointAgentWithHttpInfo(agentId, null, null);
        assertEquals(statusCode, apiResponse.getStatusCode());
    }
    
    /**
     * Disable endpoint agent
     * <p>
     * Disables an endpoint agent. If it&#39;s already disabled, it has no effect (no operation).
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void disableEndpointAgentRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        UUID agentId = UUID.fromString("861b7557-cd57-4bbb-b648-00bddf88ef49");


        var responseBodyJson = """
                {
                  "npcapVersion" : "npcapVersion",
                  "asnDetails" : {
                    "asName" : "Virgin Media Limited",
                    "asNumber" : 5089
                  },
                  "clients" : [ {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  }, {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  } ],
                  "agentType" : "endpoint",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "publicIP" : "88.45.2.123",
                  "tcpDriverAvailable" : true,
                  "platform" : "mac",
                  "manufacturer" : "Apple, Inc.",
                  "createdAt" : "2022-05-26T23:37:16Z",
                  "numberOfClients" : 3,
                  "licenseType" : "essentials",
                  "osVersion" : "Version 10.15.2 (Build 19C57)",
                  "computerName" : "DESKJET-123",
                  "model" : "MacBookAir7,2",
                  "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                  "version" : "0.123.4",
                  "vpnProfiles" : [ {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  }, {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  } ],
                  "lastSeen" : "2022-05-26T23:37:16Z",
                  "deleted" : true,
                  "totalMemory" : "16384 MB",
                  "kernelVersion" : "Darwin 19.2.0",
                  "name" : "Office Printer",
                  "location" : {
                    "locationName" : "London",
                    "latitude" : 51.51279,
                    "longitude" : -0.09184
                  },
                  "aid" : "",
                  "status" : "enabled",
                  "networkInterfaceProfiles" : [ {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  }, {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        EndpointAgent mappedResponse = 
                mapper.readValue(responseBodyJson, EndpointAgent.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/agents/{agentId}/disable";
        stubFor(post(urlPathTemplate(path))
                        .withPathParam("agentId", equalTo(URLEncoder.encode(agentId.toString(), StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.disableEndpointAgent(agentId, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Enable endpoint agent
     * <p>
     * Enables an endpoint agent. If it&#39;s already enabled, it has no effect (no operation).
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void enableEndpointAgentRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        UUID agentId = UUID.fromString("861b7557-cd57-4bbb-b648-00bddf88ef49");


        var responseBodyJson = """
                {
                  "npcapVersion" : "npcapVersion",
                  "asnDetails" : {
                    "asName" : "Virgin Media Limited",
                    "asNumber" : 5089
                  },
                  "clients" : [ {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  }, {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  } ],
                  "agentType" : "endpoint",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "publicIP" : "88.45.2.123",
                  "tcpDriverAvailable" : true,
                  "platform" : "mac",
                  "manufacturer" : "Apple, Inc.",
                  "createdAt" : "2022-05-26T23:37:16Z",
                  "numberOfClients" : 3,
                  "licenseType" : "essentials",
                  "osVersion" : "Version 10.15.2 (Build 19C57)",
                  "computerName" : "DESKJET-123",
                  "model" : "MacBookAir7,2",
                  "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                  "version" : "0.123.4",
                  "vpnProfiles" : [ {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  }, {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  } ],
                  "lastSeen" : "2022-05-26T23:37:16Z",
                  "deleted" : true,
                  "totalMemory" : "16384 MB",
                  "kernelVersion" : "Darwin 19.2.0",
                  "name" : "Office Printer",
                  "location" : {
                    "locationName" : "London",
                    "latitude" : 51.51279,
                    "longitude" : -0.09184
                  },
                  "aid" : "",
                  "status" : "enabled",
                  "networkInterfaceProfiles" : [ {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  }, {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        EndpointAgent mappedResponse = 
                mapper.readValue(responseBodyJson, EndpointAgent.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/agents/{agentId}/enable";
        stubFor(post(urlPathTemplate(path))
                        .withPathParam("agentId", equalTo(URLEncoder.encode(agentId.toString(), StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.enableEndpointAgent(agentId, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Filter endpoint agents
     * <p>
     * Retrieves a list of endpoint agents within the specified account group that match the specified filters.  If no agents meet the filter criteria, the API returns an empty array. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void filterEndpointAgentsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "searchSort" : [ {
                    "sort" : "platform",
                    "order" : "desc"
                  }, {
                    "sort" : "platform",
                    "order" : "desc"
                  } ],
                  "searchFilters" : {
                    "licenseType" : [ "essentials", "essentials" ],
                    "osVersion" : [ "Version 10.15.2", "Version 10.15.2" ],
                    "computerName" : [ "DESKTOP-45AE8", "DESKTOP-45AE8" ],
                    "locationCountryISO" : [ "FR", "FR" ],
                    "agentName" : [ "myagent-1234", "myagent-1234" ],
                    "locationSubdivision1Code" : [ "ENG", "ENG" ],
                    "id" : [ "861b7557-cd57-4bbb-b648-00bddf88ef49", "861b7557-cd57-4bbb-b648-00bddf88ef49" ],
                    "platform" : [ "mac", "mac" ],
                    "locationCity" : [ "Paris", "Paris" ],
                    "username" : [ "picard" ]
                  },
                  "thresholdFilter" : {
                    "conditionalOperator" : "and",
                    "filters" : [ {
                      "name" : "last-seen-ms",
                      "value" : 0.8008281904610115,
                      "operator" : "gte"
                    }, {
                      "name" : "last-seen-ms",
                      "value" : 0.8008281904610115,
                      "operator" : "gte"
                    } ]
                  }
                }
                                 """;
        var requestBodyContentType = "application/json";
        AgentSearchRequest mappedRequest = 
                mapper.readValue(requestBodyJson, AgentSearchRequest.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "_links" : {
                    "next" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "totalAgents" : 1,
                  "agents" : [ {
                    "npcapVersion" : "npcapVersion",
                    "asnDetails" : {
                      "asName" : "Virgin Media Limited",
                      "asNumber" : 5089
                    },
                    "clients" : [ {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    }, {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    } ],
                    "agentType" : "endpoint",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "publicIP" : "88.45.2.123",
                    "tcpDriverAvailable" : true,
                    "platform" : "mac",
                    "manufacturer" : "Apple, Inc.",
                    "createdAt" : "2022-05-26T23:37:16Z",
                    "numberOfClients" : 3,
                    "licenseType" : "essentials",
                    "osVersion" : "Version 10.15.2 (Build 19C57)",
                    "computerName" : "DESKJET-123",
                    "model" : "MacBookAir7,2",
                    "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "version" : "0.123.4",
                    "vpnProfiles" : [ {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    }, {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    } ],
                    "lastSeen" : "2022-05-26T23:37:16Z",
                    "deleted" : true,
                    "totalMemory" : "16384 MB",
                    "kernelVersion" : "Darwin 19.2.0",
                    "name" : "Office Printer",
                    "location" : {
                      "locationName" : "London",
                      "latitude" : 51.51279,
                      "longitude" : -0.09184
                    },
                    "aid" : "",
                    "status" : "enabled",
                    "networkInterfaceProfiles" : [ {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    }, {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    } ]
                  }, {
                    "npcapVersion" : "npcapVersion",
                    "asnDetails" : {
                      "asName" : "Virgin Media Limited",
                      "asNumber" : 5089
                    },
                    "clients" : [ {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    }, {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    } ],
                    "agentType" : "endpoint",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "publicIP" : "88.45.2.123",
                    "tcpDriverAvailable" : true,
                    "platform" : "mac",
                    "manufacturer" : "Apple, Inc.",
                    "createdAt" : "2022-05-26T23:37:16Z",
                    "numberOfClients" : 3,
                    "licenseType" : "essentials",
                    "osVersion" : "Version 10.15.2 (Build 19C57)",
                    "computerName" : "DESKJET-123",
                    "model" : "MacBookAir7,2",
                    "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "version" : "0.123.4",
                    "vpnProfiles" : [ {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    }, {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    } ],
                    "lastSeen" : "2022-05-26T23:37:16Z",
                    "deleted" : true,
                    "totalMemory" : "16384 MB",
                    "kernelVersion" : "Darwin 19.2.0",
                    "name" : "Office Printer",
                    "location" : {
                      "locationName" : "London",
                      "latitude" : 51.51279,
                      "longitude" : -0.09184
                    },
                    "aid" : "",
                    "status" : "enabled",
                    "networkInterfaceProfiles" : [ {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    }, {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    } ]
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        FilterEndpointAgentsResponse mappedResponse = 
                mapper.readValue(responseBodyJson, FilterEndpointAgentsResponse.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/agents/filter";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.filterEndpointAgents(mappedRequest, null, null, null, null, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Retrieve endpoint agent
     * <p>
     * Retrieves details of an agent with the specified &#x60;agent_id&#x60;.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getEndpointAgentRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        UUID agentId = UUID.fromString("861b7557-cd57-4bbb-b648-00bddf88ef49");


        var responseBodyJson = """
                {
                  "npcapVersion" : "npcapVersion",
                  "asnDetails" : {
                    "asName" : "Virgin Media Limited",
                    "asNumber" : 5089
                  },
                  "clients" : [ {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  }, {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  } ],
                  "agentType" : "endpoint",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "publicIP" : "88.45.2.123",
                  "tcpDriverAvailable" : true,
                  "platform" : "mac",
                  "manufacturer" : "Apple, Inc.",
                  "createdAt" : "2022-05-26T23:37:16Z",
                  "numberOfClients" : 3,
                  "licenseType" : "essentials",
                  "osVersion" : "Version 10.15.2 (Build 19C57)",
                  "computerName" : "DESKJET-123",
                  "model" : "MacBookAir7,2",
                  "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                  "version" : "0.123.4",
                  "vpnProfiles" : [ {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  }, {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  } ],
                  "lastSeen" : "2022-05-26T23:37:16Z",
                  "deleted" : true,
                  "totalMemory" : "16384 MB",
                  "kernelVersion" : "Darwin 19.2.0",
                  "name" : "Office Printer",
                  "location" : {
                    "locationName" : "London",
                    "latitude" : 51.51279,
                    "longitude" : -0.09184
                  },
                  "aid" : "",
                  "status" : "enabled",
                  "networkInterfaceProfiles" : [ {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  }, {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        EndpointAgent mappedResponse = 
                mapper.readValue(responseBodyJson, EndpointAgent.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/agents/{agentId}";
        stubFor(get(urlPathTemplate(path))
                        .withPathParam("agentId", equalTo(URLEncoder.encode(agentId.toString(), StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getEndpointAgent(agentId, null, null, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * List endpoint agents
     * <p>
     * Retrieves a list of endpoint agents in a given account group.  If there are no agents in the specified account group, it returns an empty array. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getEndpointAgentsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {


        var responseBodyJson = """
                {
                  "_links" : {
                    "next" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    },
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "totalAgents" : 1,
                  "agents" : [ {
                    "npcapVersion" : "npcapVersion",
                    "asnDetails" : {
                      "asName" : "Virgin Media Limited",
                      "asNumber" : 5089
                    },
                    "clients" : [ {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    }, {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    } ],
                    "agentType" : "endpoint",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "publicIP" : "88.45.2.123",
                    "tcpDriverAvailable" : true,
                    "platform" : "mac",
                    "manufacturer" : "Apple, Inc.",
                    "createdAt" : "2022-05-26T23:37:16Z",
                    "numberOfClients" : 3,
                    "licenseType" : "essentials",
                    "osVersion" : "Version 10.15.2 (Build 19C57)",
                    "computerName" : "DESKJET-123",
                    "model" : "MacBookAir7,2",
                    "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "version" : "0.123.4",
                    "vpnProfiles" : [ {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    }, {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    } ],
                    "lastSeen" : "2022-05-26T23:37:16Z",
                    "deleted" : true,
                    "totalMemory" : "16384 MB",
                    "kernelVersion" : "Darwin 19.2.0",
                    "name" : "Office Printer",
                    "location" : {
                      "locationName" : "London",
                      "latitude" : 51.51279,
                      "longitude" : -0.09184
                    },
                    "aid" : "",
                    "status" : "enabled",
                    "networkInterfaceProfiles" : [ {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    }, {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    } ]
                  }, {
                    "npcapVersion" : "npcapVersion",
                    "asnDetails" : {
                      "asName" : "Virgin Media Limited",
                      "asNumber" : 5089
                    },
                    "clients" : [ {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    }, {
                      "browserExtensions" : [ {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      }, {
                        "browser" : "edge",
                        "profile" : "Profile 1",
                        "active" : true,
                        "error" : "",
                        "version" : "0.123.0",
                        "enabled" : true
                      } ],
                      "userProfile" : {
                        "userName" : "joeblogs32"
                      }
                    } ],
                    "agentType" : "endpoint",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "publicIP" : "88.45.2.123",
                    "tcpDriverAvailable" : true,
                    "platform" : "mac",
                    "manufacturer" : "Apple, Inc.",
                    "createdAt" : "2022-05-26T23:37:16Z",
                    "numberOfClients" : 3,
                    "licenseType" : "essentials",
                    "osVersion" : "Version 10.15.2 (Build 19C57)",
                    "computerName" : "DESKJET-123",
                    "model" : "MacBookAir7,2",
                    "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                    "version" : "0.123.4",
                    "vpnProfiles" : [ {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    }, {
                      "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                      "vpnGatewayAddress" : "vpnGatewayAddress",
                      "vpnType" : "cisco-anyconnect",
                      "interfaceName" : "interfaceName",
                      "vpnClientAddresses" : [ "10.100.0.10" ]
                    } ],
                    "lastSeen" : "2022-05-26T23:37:16Z",
                    "deleted" : true,
                    "totalMemory" : "16384 MB",
                    "kernelVersion" : "Darwin 19.2.0",
                    "name" : "Office Printer",
                    "location" : {
                      "locationName" : "London",
                      "latitude" : 51.51279,
                      "longitude" : -0.09184
                    },
                    "aid" : "",
                    "status" : "enabled",
                    "networkInterfaceProfiles" : [ {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    }, {
                      "ethernetProfile" : {
                        "linkSpeed" : 0
                      },
                      "hardwareType" : "wireless",
                      "interfaceName" : "en0",
                      "addressProfiles" : [ {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      }, {
                        "prefixLength" : 24,
                        "addressType" : "unique-local",
                        "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                        "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                        "gateway" : "192.168.0.254"
                      } ],
                      "wirelessProfile" : {
                        "rssi" : -36,
                        "bssid" : "00:11:22:aa:bb:cc",
                        "channel" : 48,
                        "phyMode" : "802.11ac",
                        "ssid" : "GuestWiFi"
                      }
                    } ]
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        ListEndpointAgentsResponse mappedResponse = 
                mapper.readValue(responseBodyJson, ListEndpointAgentsResponse.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/agents";
        stubFor(get(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getEndpointAgents(null, null, null, null, null, null, null, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Get agent connection string
     * <p>
     * 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getEndpointAgentsConnectionStringRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {


        var responseBodyJson = """
                {
                  "connectionString" : "D2xZSLlqo64Xe2EnYisklA==",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  }
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        ConnectionString mappedResponse = 
                mapper.readValue(responseBodyJson, ConnectionString.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/agents/connection-string";
        stubFor(get(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getEndpointAgentsConnectionString(null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Update endpoint agent
     * <p>
     * Updates the agent with the specified &#x60;agent_id&#x60;. This API supports the modification of the following fields:  * &#x60;name&#x60;  * &#x60;licenseType&#x60;  Any attempt to update fields other than those listed above, with a value different from their current value, will result in a 400 Bad Request response. 
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void updateEndpointAgentRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        UUID agentId = UUID.fromString("861b7557-cd57-4bbb-b648-00bddf88ef49");

        var requestBodyJson = """
                {
                  "licenseType" : "essentials",
                  "name" : "Office Printer"
                }
                                 """;
        var requestBodyContentType = "application/json";
        EndpointAgentUpdate mappedRequest = 
                mapper.readValue(requestBodyJson, EndpointAgentUpdate.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "npcapVersion" : "npcapVersion",
                  "asnDetails" : {
                    "asName" : "Virgin Media Limited",
                    "asNumber" : 5089
                  },
                  "clients" : [ {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  }, {
                    "browserExtensions" : [ {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    }, {
                      "browser" : "edge",
                      "profile" : "Profile 1",
                      "active" : true,
                      "error" : "",
                      "version" : "0.123.0",
                      "enabled" : true
                    } ],
                    "userProfile" : {
                      "userName" : "joeblogs32"
                    }
                  } ],
                  "agentType" : "endpoint",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "publicIP" : "88.45.2.123",
                  "tcpDriverAvailable" : true,
                  "platform" : "mac",
                  "manufacturer" : "Apple, Inc.",
                  "createdAt" : "2022-05-26T23:37:16Z",
                  "numberOfClients" : 3,
                  "licenseType" : "essentials",
                  "osVersion" : "Version 10.15.2 (Build 19C57)",
                  "computerName" : "DESKJET-123",
                  "model" : "MacBookAir7,2",
                  "id" : "861b7557-cd57-4bbb-b648-00bddf88ef49",
                  "version" : "0.123.4",
                  "vpnProfiles" : [ {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  }, {
                    "vpnClientNetworkRange" : [ "10.100.0.0/22" ],
                    "vpnGatewayAddress" : "vpnGatewayAddress",
                    "vpnType" : "cisco-anyconnect",
                    "interfaceName" : "interfaceName",
                    "vpnClientAddresses" : [ "10.100.0.10" ]
                  } ],
                  "lastSeen" : "2022-05-26T23:37:16Z",
                  "deleted" : true,
                  "totalMemory" : "16384 MB",
                  "kernelVersion" : "Darwin 19.2.0",
                  "name" : "Office Printer",
                  "location" : {
                    "locationName" : "London",
                    "latitude" : 51.51279,
                    "longitude" : -0.09184
                  },
                  "aid" : "",
                  "status" : "enabled",
                  "networkInterfaceProfiles" : [ {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  }, {
                    "ethernetProfile" : {
                      "linkSpeed" : 0
                    },
                    "hardwareType" : "wireless",
                    "interfaceName" : "en0",
                    "addressProfiles" : [ {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    }, {
                      "prefixLength" : 24,
                      "addressType" : "unique-local",
                      "ipAddress" : "2001:db8:3333:4444:5555:6666:7777:8888",
                      "routerHardwareAddress" : "5c:b1:3e:46:1c:84",
                      "gateway" : "192.168.0.254"
                    } ],
                    "wirelessProfile" : {
                      "rssi" : -36,
                      "bssid" : "00:11:22:aa:bb:cc",
                      "channel" : 48,
                      "phyMode" : "802.11ac",
                      "ssid" : "GuestWiFi"
                    }
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        EndpointAgent mappedResponse = 
                mapper.readValue(responseBodyJson, EndpointAgent.class);
        assertNotNull(mappedResponse);

        var path = "/endpoint/agents/{agentId}";
        stubFor(patch(urlPathTemplate(path))
                        .withPathParam("agentId", equalTo(URLEncoder.encode(agentId.toString(), StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.updateEndpointAgent(agentId, null, null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
}
