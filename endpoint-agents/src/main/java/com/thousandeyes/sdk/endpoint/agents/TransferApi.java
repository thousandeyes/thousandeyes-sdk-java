/*
 * Endpoint Agents API
 * Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).
 *
 * The version of the OpenAPI document: 7.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.thousandeyes.sdk.endpoint.agents;

import static com.thousandeyes.sdk.client.RequestUtil.parameterToPairs;
import static com.thousandeyes.sdk.client.RequestUtil.urlEncode;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.ApiResponse;
import com.thousandeyes.sdk.client.ApiRequest;
import com.thousandeyes.sdk.utils.Config;
import org.apache.commons.lang3.tuple.Pair;

import com.thousandeyes.sdk.endpoint.agents.model.AgentTransferRequest;
import com.thousandeyes.sdk.endpoint.agents.model.BulkAgentTransferRequest;
import com.thousandeyes.sdk.endpoint.agents.model.BulkAgentTransferResponse;
import com.thousandeyes.sdk.endpoint.agents.model.Error;
import java.util.UUID;
import com.thousandeyes.sdk.endpoint.agents.model.UnauthorizedError;
import com.thousandeyes.sdk.endpoint.agents.model.ValidationError;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class TransferApi {
  private final ApiClient apiClient;

  public TransferApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Transfer endpoint agent
   * Initiates the transfer of an agent from its current account, which must correspond to the provided aid, to the target account.  **Note:** It is essential to ensure that the &#x60;aid&#x60; parameter matches the current account of the agent for this operation to succeed. 
   * @param agentId The identifier of the agent to operate on. (required)
   * @param agentTransferRequest The request to move an agent between accounts. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @throws ApiException if fails to make API call
   */
  public void transferEndpointAgent(UUID agentId, AgentTransferRequest agentTransferRequest, String aid) throws ApiException {
    transferEndpointAgentWithHttpInfo(agentId, agentTransferRequest, aid);
  }

  /**
   * Transfer endpoint agent
   * Initiates the transfer of an agent from its current account, which must correspond to the provided aid, to the target account.  **Note:** It is essential to ensure that the &#x60;aid&#x60; parameter matches the current account of the agent for this operation to succeed. 
   * @param agentId The identifier of the agent to operate on. (required)
   * @param agentTransferRequest The request to move an agent between accounts. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> transferEndpointAgentWithHttpInfo(UUID agentId, AgentTransferRequest agentTransferRequest, String aid) throws ApiException {
    transferEndpointAgentValidateRequest(agentId, agentTransferRequest);

    var requestBuilder = transferEndpointAgentRequestBuilder(agentId, agentTransferRequest, aid);

    return apiClient.send(requestBuilder.build(), Void.class);
  }

  private void transferEndpointAgentValidateRequest(UUID agentId, AgentTransferRequest agentTransferRequest) throws ApiException {
      // verify the required parameter 'agentId' is set
      if (agentId == null) {
        throw new ApiException(400, "Missing the required parameter 'agentId' when calling transferEndpointAgent");
      }
      // verify the required parameter 'agentTransferRequest' is set
      if (agentTransferRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'agentTransferRequest' when calling transferEndpointAgent");
      }
  }

  private ApiRequest.ApiRequestBuilder transferEndpointAgentRequestBuilder(UUID agentId, AgentTransferRequest agentTransferRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/v7/endpoint/agents/{agentId}/transfer"
        .replace("{agentId}", urlEncode(agentId.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(agentTransferRequest);
    return requestBuilder;
  }
  /**
   * Bulk transfer agents
   * Initiates the transfer of multiple agents between accounts. The following conditions apply:  * The requester must possess &#39;write&#39; permissions for both the &#39;from&#39; and &#39;to&#39; accounts involved in each transfer.  * Multiple transfers may involve a mix of different source and destination accounts. * For each transfer request, the &#39;from&#39; account must match the current account of the respective agent. * Transfers are executed asynchronously. * Progress tracking is not intended, but users can monitor the progress by periodically polling the &#39;get agent&#39; endpoint. * Each transfer request is individually validated and completed; this operation is not atomic, meaning transfers can succeed or fail individually. * The API response provides the status of each transfer request. 
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @param bulkAgentTransferRequest A collection of &#x60;AgentTransfers&#x60;. (optional)
   * @return BulkAgentTransferResponse
   * @throws ApiException if fails to make API call
   */
  public BulkAgentTransferResponse transferEndpointAgents(String aid, BulkAgentTransferRequest bulkAgentTransferRequest) throws ApiException {
    ApiResponse<BulkAgentTransferResponse> response = transferEndpointAgentsWithHttpInfo(aid, bulkAgentTransferRequest);
    return response.getData();
  }

  /**
   * Bulk transfer agents
   * Initiates the transfer of multiple agents between accounts. The following conditions apply:  * The requester must possess &#39;write&#39; permissions for both the &#39;from&#39; and &#39;to&#39; accounts involved in each transfer.  * Multiple transfers may involve a mix of different source and destination accounts. * For each transfer request, the &#39;from&#39; account must match the current account of the respective agent. * Transfers are executed asynchronously. * Progress tracking is not intended, but users can monitor the progress by periodically polling the &#39;get agent&#39; endpoint. * Each transfer request is individually validated and completed; this operation is not atomic, meaning transfers can succeed or fail individually. * The API response provides the status of each transfer request. 
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @param bulkAgentTransferRequest A collection of &#x60;AgentTransfers&#x60;. (optional)
   * @return ApiResponse&lt;BulkAgentTransferResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BulkAgentTransferResponse> transferEndpointAgentsWithHttpInfo(String aid, BulkAgentTransferRequest bulkAgentTransferRequest) throws ApiException {
    transferEndpointAgentsValidateRequest();

    var requestBuilder = transferEndpointAgentsRequestBuilder(aid, bulkAgentTransferRequest);

    return apiClient.send(requestBuilder.build(), BulkAgentTransferResponse.class);
  }

  private void transferEndpointAgentsValidateRequest() throws ApiException {
  }

  private ApiRequest.ApiRequestBuilder transferEndpointAgentsRequestBuilder(String aid, BulkAgentTransferRequest bulkAgentTransferRequest) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/v7/endpoint/agents/transfer/bulk";
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(bulkAgentTransferRequest);
    return requestBuilder;
  }
}
