/*
 * Dashboards API
 * Manage ThousandEyes Dashboards.
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.thousandeyes.sdk.dashboards;

import static com.thousandeyes.sdk.client.RequestUtil.parameterToPairs;
import static com.thousandeyes.sdk.client.RequestUtil.urlEncode;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.ApiResponse;
import com.thousandeyes.sdk.client.ApiRequest;
import com.thousandeyes.sdk.utils.Config;
import org.apache.commons.lang3.tuple.Pair;

import com.thousandeyes.sdk.dashboards.model.ApiContextFilterRequest;
import com.thousandeyes.sdk.dashboards.model.ApiContextFilterResponse;
import com.thousandeyes.sdk.dashboards.model.ApiContextFiltersResponse;
import com.thousandeyes.sdk.dashboards.model.Error;
import java.net.URI;
import com.thousandeyes.sdk.dashboards.model.UnauthorizedError;
import com.thousandeyes.sdk.dashboards.model.ValidationError;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class DashboardsFiltersApi {
  private final ApiClient apiClient;

  public DashboardsFiltersApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create dashboard filter
   * Creates a new dashboard filter in your account group. To create a filter,  you must have one of the following permissions: * &#x60;Edit dashboard templates for all users in account group&#x60; permission (Account Admin). * &#x60;Edit own dashboard templates&#x60; permission (Regular User). 
   * @param apiContextFilterRequest Dashboard filter object to be created and saved (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiContextFilterResponse
   * @throws ApiException if fails to make API call
   */
  public ApiContextFilterResponse createDashboardFilter(ApiContextFilterRequest apiContextFilterRequest, String aid) throws ApiException {
    ApiResponse<ApiContextFilterResponse> response = createDashboardFilterWithHttpInfo(apiContextFilterRequest, aid);
    return response.getData();
  }

  /**
   * Create dashboard filter
   * Creates a new dashboard filter in your account group. To create a filter,  you must have one of the following permissions: * &#x60;Edit dashboard templates for all users in account group&#x60; permission (Account Admin). * &#x60;Edit own dashboard templates&#x60; permission (Regular User). 
   * @param apiContextFilterRequest Dashboard filter object to be created and saved (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;ApiContextFilterResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApiContextFilterResponse> createDashboardFilterWithHttpInfo(ApiContextFilterRequest apiContextFilterRequest, String aid) throws ApiException {
    createDashboardFilterValidateRequest(apiContextFilterRequest);

    var requestBuilder = createDashboardFilterRequestBuilder(apiContextFilterRequest, aid);

    return apiClient.send(requestBuilder.build(), ApiContextFilterResponse.class);
  }

  private void createDashboardFilterValidateRequest(ApiContextFilterRequest apiContextFilterRequest) throws ApiException {
      // verify the required parameter 'apiContextFilterRequest' is set
      if (apiContextFilterRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'apiContextFilterRequest' when calling createDashboardFilter");
      }
  }

  private ApiRequest.ApiRequestBuilder createDashboardFilterRequestBuilder(ApiContextFilterRequest apiContextFilterRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/dashboards/filters";
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(apiContextFilterRequest);
    return requestBuilder;
  }
  /**
   * Delete dashboard filter
   * Deletes a dashboard filter using the &#x60;filterId&#x60; provided in the request.    **Note**:   * Users with the &#x60;Edit dashboard templates for all users in account group&#x60; permission (Account Admin) can delete any dashboard filter.   * Users with the &#x60;Edit own dashboard templates&#x60; permission (Regular User) can only delete the dashboard filters they have created themselves. 
   * @param id Unique dashboard filter ID. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @throws ApiException if fails to make API call
   */
  public void deleteDashboardFilter(String id, String aid) throws ApiException {
    deleteDashboardFilterWithHttpInfo(id, aid);
  }

  /**
   * Delete dashboard filter
   * Deletes a dashboard filter using the &#x60;filterId&#x60; provided in the request.    **Note**:   * Users with the &#x60;Edit dashboard templates for all users in account group&#x60; permission (Account Admin) can delete any dashboard filter.   * Users with the &#x60;Edit own dashboard templates&#x60; permission (Regular User) can only delete the dashboard filters they have created themselves. 
   * @param id Unique dashboard filter ID. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteDashboardFilterWithHttpInfo(String id, String aid) throws ApiException {
    deleteDashboardFilterValidateRequest(id);

    var requestBuilder = deleteDashboardFilterRequestBuilder(id, aid);

    return apiClient.send(requestBuilder.build(), Void.class);
  }

  private void deleteDashboardFilterValidateRequest(String id) throws ApiException {
      // verify the required parameter 'id' is set
      if (id == null) {
        throw new ApiException(400, "Missing the required parameter 'id' when calling deleteDashboardFilter");
      }
  }

  private ApiRequest.ApiRequestBuilder deleteDashboardFilterRequestBuilder(String id, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("DELETE");

    String path = "/dashboards/filters/{id}"
        .replace("{id}", urlEncode(id.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Accept", List.of("application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    return requestBuilder;
  }
  /**
   * Get dashboard filter
   * Returns a list of data source filters and their metadata within the dashboard filter. 
   * @param id Unique dashboard filter ID. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiContextFilterResponse
   * @throws ApiException if fails to make API call
   */
  public ApiContextFilterResponse getDashboardFilter(String id, String aid) throws ApiException {
    ApiResponse<ApiContextFilterResponse> response = getDashboardFilterWithHttpInfo(id, aid);
    return response.getData();
  }

  /**
   * Get dashboard filter
   * Returns a list of data source filters and their metadata within the dashboard filter. 
   * @param id Unique dashboard filter ID. (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;ApiContextFilterResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApiContextFilterResponse> getDashboardFilterWithHttpInfo(String id, String aid) throws ApiException {
    getDashboardFilterValidateRequest(id);

    var requestBuilder = getDashboardFilterRequestBuilder(id, aid);

    return apiClient.send(requestBuilder.build(), ApiContextFilterResponse.class);
  }

  private void getDashboardFilterValidateRequest(String id) throws ApiException {
      // verify the required parameter 'id' is set
      if (id == null) {
        throw new ApiException(400, "Missing the required parameter 'id' when calling getDashboardFilter");
      }
  }

  private ApiRequest.ApiRequestBuilder getDashboardFilterRequestBuilder(String id, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("GET");

    String path = "/dashboards/filters/{id}"
        .replace("{id}", urlEncode(id.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    return requestBuilder;
  }
  /**
   * List dashboard filters
   * Returns a list of dashboard filters and its context within your account group. 
   * @param searchPattern Optional search pattern parameter to filter list of dashboard filters by either name or description values. (optional)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiContextFiltersResponse
   * @throws ApiException if fails to make API call
   */
  public ApiContextFiltersResponse getDashboardsFilters(String searchPattern, String aid) throws ApiException {
    ApiResponse<ApiContextFiltersResponse> response = getDashboardsFiltersWithHttpInfo(searchPattern, aid);
    return response.getData();
  }

  /**
   * List dashboard filters
   * Returns a list of dashboard filters and its context within your account group. 
   * @param searchPattern Optional search pattern parameter to filter list of dashboard filters by either name or description values. (optional)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;ApiContextFiltersResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApiContextFiltersResponse> getDashboardsFiltersWithHttpInfo(String searchPattern, String aid) throws ApiException {
    getDashboardsFiltersValidateRequest();

    var requestBuilder = getDashboardsFiltersRequestBuilder(searchPattern, aid);

    return apiClient.send(requestBuilder.build(), ApiContextFiltersResponse.class);
  }

  private void getDashboardsFiltersValidateRequest() throws ApiException {
  }

  private ApiRequest.ApiRequestBuilder getDashboardsFiltersRequestBuilder(String searchPattern, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("GET");

    String path = "/dashboards/filters";
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("searchPattern", searchPattern));
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    return requestBuilder;
  }
  /**
   * Update dashboard filter
   * Updates an existing dashboard filter in your account group.                        **Note**:    * Users with the &#x60;Edit dashboard templates for all users in account group&#x60; permission (Account Admin) can update any dashboard filter.    * Users with the &#x60;Edit own dashboard templates&#x60; permission (Regular User) can only update the dashboard filters they have created themselves. 
   * @param id Unique dashboard filter ID. (required)
   * @param apiContextFilterRequest Updated dashboard filter context object (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiContextFilterResponse
   * @throws ApiException if fails to make API call
   */
  public ApiContextFilterResponse updateDashboardFilter(String id, ApiContextFilterRequest apiContextFilterRequest, String aid) throws ApiException {
    ApiResponse<ApiContextFilterResponse> response = updateDashboardFilterWithHttpInfo(id, apiContextFilterRequest, aid);
    return response.getData();
  }

  /**
   * Update dashboard filter
   * Updates an existing dashboard filter in your account group.                        **Note**:    * Users with the &#x60;Edit dashboard templates for all users in account group&#x60; permission (Account Admin) can update any dashboard filter.    * Users with the &#x60;Edit own dashboard templates&#x60; permission (Regular User) can only update the dashboard filters they have created themselves. 
   * @param id Unique dashboard filter ID. (required)
   * @param apiContextFilterRequest Updated dashboard filter context object (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;ApiContextFilterResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApiContextFilterResponse> updateDashboardFilterWithHttpInfo(String id, ApiContextFilterRequest apiContextFilterRequest, String aid) throws ApiException {
    updateDashboardFilterValidateRequest(id, apiContextFilterRequest);

    var requestBuilder = updateDashboardFilterRequestBuilder(id, apiContextFilterRequest, aid);

    return apiClient.send(requestBuilder.build(), ApiContextFilterResponse.class);
  }

  private void updateDashboardFilterValidateRequest(String id, ApiContextFilterRequest apiContextFilterRequest) throws ApiException {
      // verify the required parameter 'id' is set
      if (id == null) {
        throw new ApiException(400, "Missing the required parameter 'id' when calling updateDashboardFilter");
      }
      // verify the required parameter 'apiContextFilterRequest' is set
      if (apiContextFilterRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'apiContextFilterRequest' when calling updateDashboardFilter");
      }
  }

  private ApiRequest.ApiRequestBuilder updateDashboardFilterRequestBuilder(String id, ApiContextFilterRequest apiContextFilterRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("PUT");

    String path = "/dashboards/filters/{id}"
        .replace("{id}", urlEncode(id.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(apiContextFilterRequest);
    return requestBuilder;
  }
}
