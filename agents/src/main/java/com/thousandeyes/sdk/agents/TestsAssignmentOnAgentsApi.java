/*
 * Agents API
 *  ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.thousandeyes.sdk.agents;

import static com.thousandeyes.sdk.client.RequestUtil.parameterToPairs;
import static com.thousandeyes.sdk.client.RequestUtil.urlEncode;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.ApiResponse;
import com.thousandeyes.sdk.client.ApiRequest;
import com.thousandeyes.sdk.utils.Config;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.lang3.reflect.TypeUtils;
import com.thousandeyes.sdk.agents.model.AgentDetails;
import com.thousandeyes.sdk.agents.model.AgentTestsAssignRequest;
import com.thousandeyes.sdk.agents.model.Error;
import com.thousandeyes.sdk.agents.model.UnauthorizedError;
import com.thousandeyes.sdk.agents.model.ValidationError;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class TestsAssignmentOnAgentsApi {
  private final ApiClient apiClient;

  public TestsAssignmentOnAgentsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Assign tests to an agent
   * Assign tests to a specific Agent. Existing assigned tests are not removed.  **Important notes:**    * The operation fails if the specified agent does not exist.    * If any provided test ID is invalid, the entire operation is canceled.    * Already assigned tests are ignored; other valid tests will be assigned.    * This operation does not overwrite existing assignments.
   * @param agentId Unique ID for the Enterprise Agent cluster to add new agents to. (required)
   * @param agentTestsAssignRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return AgentDetails
   * @throws ApiException if fails to make API call
   */
  public AgentDetails assignTests(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    ApiResponse<AgentDetails> response = assignTestsWithHttpInfo(agentId, agentTestsAssignRequest, aid);
    return response.getData();
  }

  /**
   * Assign tests to an agent
   * Assign tests to a specific Agent. Existing assigned tests are not removed.  **Important notes:**    * The operation fails if the specified agent does not exist.    * If any provided test ID is invalid, the entire operation is canceled.    * Already assigned tests are ignored; other valid tests will be assigned.    * This operation does not overwrite existing assignments.
   * @param agentId Unique ID for the Enterprise Agent cluster to add new agents to. (required)
   * @param agentTestsAssignRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;AgentDetails&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AgentDetails> assignTestsWithHttpInfo(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    assignTestsValidateRequest(agentId, agentTestsAssignRequest);

    var requestBuilder = assignTestsRequestBuilder(agentId, agentTestsAssignRequest, aid);

    return apiClient.send(requestBuilder.build(), AgentDetails.class);
  }

  private void assignTestsValidateRequest(String agentId, AgentTestsAssignRequest agentTestsAssignRequest) throws ApiException {
      // verify the required parameter 'agentId' is set
      if (agentId == null) {
        throw new ApiException(400, "Missing the required parameter 'agentId' when calling assignTests");
      }
      // verify the required parameter 'agentTestsAssignRequest' is set
      if (agentTestsAssignRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'agentTestsAssignRequest' when calling assignTests");
      }
  }

  private ApiRequest.ApiRequestBuilder assignTestsRequestBuilder(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/agents/{agentId}/tests/assign"
        .replace("{agentId}", urlEncode(agentId.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(agentTestsAssignRequest);
    return requestBuilder;
  }
  /**
   * Overwrite tests assigned to an agent
   * Replaces all tests assigned to a specific agent with the new set of test IDs provided.  **Important notes:**    * The operation fails if the specified agent does not exist.    * If any test ID is invalid, the operation is canceled and no changes are made.    * Already assigned tests that are also in the request are ignored.    * Previously assigned tests not included in the request will be removed.
   * @param agentId Unique ID for the Enterprise Agent cluster to add new agents to. (required)
   * @param agentTestsAssignRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return AgentDetails
   * @throws ApiException if fails to make API call
   */
  public AgentDetails overwriteTests(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    ApiResponse<AgentDetails> response = overwriteTestsWithHttpInfo(agentId, agentTestsAssignRequest, aid);
    return response.getData();
  }

  /**
   * Overwrite tests assigned to an agent
   * Replaces all tests assigned to a specific agent with the new set of test IDs provided.  **Important notes:**    * The operation fails if the specified agent does not exist.    * If any test ID is invalid, the operation is canceled and no changes are made.    * Already assigned tests that are also in the request are ignored.    * Previously assigned tests not included in the request will be removed.
   * @param agentId Unique ID for the Enterprise Agent cluster to add new agents to. (required)
   * @param agentTestsAssignRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;AgentDetails&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AgentDetails> overwriteTestsWithHttpInfo(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    overwriteTestsValidateRequest(agentId, agentTestsAssignRequest);

    var requestBuilder = overwriteTestsRequestBuilder(agentId, agentTestsAssignRequest, aid);

    return apiClient.send(requestBuilder.build(), AgentDetails.class);
  }

  private void overwriteTestsValidateRequest(String agentId, AgentTestsAssignRequest agentTestsAssignRequest) throws ApiException {
      // verify the required parameter 'agentId' is set
      if (agentId == null) {
        throw new ApiException(400, "Missing the required parameter 'agentId' when calling overwriteTests");
      }
      // verify the required parameter 'agentTestsAssignRequest' is set
      if (agentTestsAssignRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'agentTestsAssignRequest' when calling overwriteTests");
      }
  }

  private ApiRequest.ApiRequestBuilder overwriteTestsRequestBuilder(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/agents/{agentId}/tests/override"
        .replace("{agentId}", urlEncode(agentId.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(agentTestsAssignRequest);
    return requestBuilder;
  }
  /**
   * Unassign tests from an agent
   * Unassigns the specified tests from a specific agent.  **Important notes:**    * The operation fails if the specified agent does not exist.    * If any test ID is invalid, the operation is canceled and no changes are made.
   * @param agentId Unique ID for the Enterprise Agent cluster to add new agents to. (required)
   * @param agentTestsAssignRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return AgentDetails
   * @throws ApiException if fails to make API call
   */
  public AgentDetails unassignTests(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    ApiResponse<AgentDetails> response = unassignTestsWithHttpInfo(agentId, agentTestsAssignRequest, aid);
    return response.getData();
  }

  /**
   * Unassign tests from an agent
   * Unassigns the specified tests from a specific agent.  **Important notes:**    * The operation fails if the specified agent does not exist.    * If any test ID is invalid, the operation is canceled and no changes are made.
   * @param agentId Unique ID for the Enterprise Agent cluster to add new agents to. (required)
   * @param agentTestsAssignRequest  (required)
   * @param aid A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response. (optional)
   * @return ApiResponse&lt;AgentDetails&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AgentDetails> unassignTestsWithHttpInfo(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    unassignTestsValidateRequest(agentId, agentTestsAssignRequest);

    var requestBuilder = unassignTestsRequestBuilder(agentId, agentTestsAssignRequest, aid);

    return apiClient.send(requestBuilder.build(), AgentDetails.class);
  }

  private void unassignTestsValidateRequest(String agentId, AgentTestsAssignRequest agentTestsAssignRequest) throws ApiException {
      // verify the required parameter 'agentId' is set
      if (agentId == null) {
        throw new ApiException(400, "Missing the required parameter 'agentId' when calling unassignTests");
      }
      // verify the required parameter 'agentTestsAssignRequest' is set
      if (agentTestsAssignRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'agentTestsAssignRequest' when calling unassignTests");
      }
  }

  private ApiRequest.ApiRequestBuilder unassignTestsRequestBuilder(String agentId, AgentTestsAssignRequest agentTestsAssignRequest, String aid) throws ApiException {
    ApiRequest.ApiRequestBuilder requestBuilder = ApiRequest.builder()
            .method("POST");

    String path = "/agents/{agentId}/tests/unassign"
        .replace("{agentId}", urlEncode(agentId.toString()));
    requestBuilder.path(path);

    List<Pair<String, String>> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(parameterToPairs("aid", aid));

    if (!localVarQueryParams.isEmpty()) {
      requestBuilder.queryParams(localVarQueryParams);
    }

    requestBuilder.header("Content-Type", List.of("application/json"));
    requestBuilder.header("Accept", List.of("application/hal+json, application/json, application/problem+json"));
    requestBuilder.header("User-Agent", List.of(Config.USER_AGENT));
    requestBuilder.requestBody(agentTestsAssignRequest);
    return requestBuilder;
  }
}
