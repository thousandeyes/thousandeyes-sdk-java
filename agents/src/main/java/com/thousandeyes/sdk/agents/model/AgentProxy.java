/*
 * Agents API
 *  ## Overview Manage all agents available to your account in ThousandEyes, including both Cloud and Enterprise Agents.
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.agents.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.thousandeyes.sdk.agents.model.ProxyAuthType;
import com.thousandeyes.sdk.agents.model.ProxyType;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AgentProxy
 */
@JsonPropertyOrder({
  AgentProxy.JSON_PROPERTY_AID,
  AgentProxy.JSON_PROPERTY_AUTH_TYPE,
  AgentProxy.JSON_PROPERTY_BYPASS_LIST,
  AgentProxy.JSON_PROPERTY_LAST_MODIFIED,
  AgentProxy.JSON_PROPERTY_LOCATION,
  AgentProxy.JSON_PROPERTY_IS_LOCAL_CONFIGURED,
  AgentProxy.JSON_PROPERTY_NAME,
  AgentProxy.JSON_PROPERTY_PASSWORD,
  AgentProxy.JSON_PROPERTY_PROXY_ID,
  AgentProxy.JSON_PROPERTY_TYPE,
  AgentProxy.JSON_PROPERTY_USER
})
@jakarta.annotation.Generated(value = "com.thousandeyes.api.codegen.ThousandeyesJavaGenerator")
public class AgentProxy {
  public static final String JSON_PROPERTY_AID = "aid";
  private String aid;

  public static final String JSON_PROPERTY_AUTH_TYPE = "authType";
  private ProxyAuthType authType;

  public static final String JSON_PROPERTY_BYPASS_LIST = "bypassList";
  private List<String> bypassList = new ArrayList<>();

  public static final String JSON_PROPERTY_LAST_MODIFIED = "lastModified";
  private OffsetDateTime lastModified;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public static final String JSON_PROPERTY_IS_LOCAL_CONFIGURED = "isLocalConfigured";
  private Boolean isLocalConfigured;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_PROXY_ID = "proxyId";
  private String proxyId;

  public static final String JSON_PROPERTY_TYPE = "type";
  private ProxyType type;

  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  public AgentProxy() { 
  }

  public AgentProxy aid(String aid) {
    this.aid = aid;
    return this;
  }

   /**
   * Account id that this proxy configuration belongs to
   * @return aid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAid() {
    return aid;
  }


  @JsonProperty(JSON_PROPERTY_AID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAid(String aid) {
    this.aid = aid;
  }


  public AgentProxy authType(ProxyAuthType authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProxyAuthType getAuthType() {
    return authType;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthType(ProxyAuthType authType) {
    this.authType = authType;
  }


  public AgentProxy bypassList(List<String> bypassList) {
    this.bypassList = bypassList;
    return this;
  }

  public AgentProxy addBypassListItem(String bypassListItem) {
    if (this.bypassList == null) {
      this.bypassList = new ArrayList<>();
    }
    this.bypassList.add(bypassListItem);
    return this;
  }

   /**
   * A list of hostnames, network prefixes, or wildcards used to determine which test targets should not be proxied. If all tests should be proxied, leave empty.
   * @return bypassList
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BYPASS_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getBypassList() {
    return bypassList;
  }


  @JsonProperty(JSON_PROPERTY_BYPASS_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBypassList(List<String> bypassList) {
    this.bypassList = bypassList;
  }


  public AgentProxy lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Last modification timestamp of the proxy. Expressed in UTC (ISO date-time format).
   * @return lastModified
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastModified() {
    return lastModified;
  }


  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public AgentProxy location(String location) {
    this.location = location;
    return this;
  }

   /**
   * The location of the proxy. If proxyType is &#x60;static&#x60; use the format &#x60;hostname:port&#x60;. If location is &#x60;pac&#x60;, then specify the URL where the PAC file can be obtained.
   * @return location
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(String location) {
    this.location = location;
  }


  public AgentProxy isLocalConfigured(Boolean isLocalConfigured) {
    this.isLocalConfigured = isLocalConfigured;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; if this proxy configuration comes from the agentâ€™s config file. Specify &#x60;false&#x60; if the proxy configuration was created in the ThousandEyes application.
   * @return isLocalConfigured
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_LOCAL_CONFIGURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsLocalConfigured() {
    return isLocalConfigured;
  }


  @JsonProperty(JSON_PROPERTY_IS_LOCAL_CONFIGURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsLocalConfigured(Boolean isLocalConfigured) {
    this.isLocalConfigured = isLocalConfigured;
  }


  public AgentProxy name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Expression of agent notification rule.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public AgentProxy password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for proxy authentication
   * @return password
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  public AgentProxy proxyId(String proxyId) {
    this.proxyId = proxyId;
    return this;
  }

   /**
   * Agent proxy&#39;s unique ID.
   * @return proxyId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROXY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProxyId() {
    return proxyId;
  }


  @JsonProperty(JSON_PROPERTY_PROXY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProxyId(String proxyId) {
    this.proxyId = proxyId;
  }


  public AgentProxy type(ProxyType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProxyType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(ProxyType type) {
    this.type = type;
  }


  public AgentProxy user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Username for proxy authentication.
   * @return user
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  /**
   * Return true if this AgentProxy object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentProxy agentProxy = (AgentProxy) o;
    return Objects.equals(this.aid, agentProxy.aid) &&
        Objects.equals(this.authType, agentProxy.authType) &&
        Objects.equals(this.bypassList, agentProxy.bypassList) &&
        Objects.equals(this.lastModified, agentProxy.lastModified) &&
        Objects.equals(this.location, agentProxy.location) &&
        Objects.equals(this.isLocalConfigured, agentProxy.isLocalConfigured) &&
        Objects.equals(this.name, agentProxy.name) &&
        Objects.equals(this.password, agentProxy.password) &&
        Objects.equals(this.proxyId, agentProxy.proxyId) &&
        Objects.equals(this.type, agentProxy.type) &&
        Objects.equals(this.user, agentProxy.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aid, authType, bypassList, lastModified, location, isLocalConfigured, name, password, proxyId, type, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentProxy {\n");
    sb.append("    aid: ").append(toIndentedString(aid)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    bypassList: ").append(toIndentedString(bypassList)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    isLocalConfigured: ").append(toIndentedString(isLocalConfigured)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append("*").append("\n");
    sb.append("    proxyId: ").append(toIndentedString(proxyId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

